// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE 

#include <arpa/inet.h>
#include <dirent.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <net/if.h>
#include <net/if_arp.h>
#include <netinet/in.h>
#include <pthread.h>
#include <sched.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/prctl.h>
#include <sys/resource.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

#include <linux/capability.h>
#include <linux/futex.h>
#include <linux/genetlink.h>
#include <linux/if_addr.h>
#include <linux/if_ether.h>
#include <linux/if_link.h>
#include <linux/if_tun.h>
#include <linux/in6.h>
#include <linux/ip.h>
#include <linux/loop.h>
#include <linux/neighbour.h>
#include <linux/net.h>
#include <linux/netlink.h>
#include <linux/rtnetlink.h>
#include <linux/tcp.h>
#include <linux/veth.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

static void sleep_ms(uint64_t ms)
{
	usleep(ms * 1000);
}

static uint64_t current_time_ms(void)
{
	struct timespec ts;
	if (clock_gettime(CLOCK_MONOTONIC, &ts))
	exit(1);
	return (uint64_t)ts.tv_sec * 1000 + (uint64_t)ts.tv_nsec / 1000000;
}

static void use_temporary_dir(void)
{
	char tmpdir_template[] = "./syzkaller.XXXXXX";
	char* tmpdir = mkdtemp(tmpdir_template);
	if (!tmpdir)
	exit(1);
	if (chmod(tmpdir, 0777))
	exit(1);
	if (chdir(tmpdir))
	exit(1);
}

static void thread_start(void* (*fn)(void*), void* arg)
{
	pthread_t th;
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setstacksize(&attr, 128 << 10);
	int i = 0;
	for (; i < 100; i++) {
		if (pthread_create(&th, &attr, fn, arg) == 0) {
			pthread_attr_destroy(&attr);
			return;
		}
		if (errno == EAGAIN) {
			usleep(50);
			continue;
		}
		break;
	}
	exit(1);
}

typedef struct {
	int state;
} event_t;

static void event_init(event_t* ev)
{
	ev->state = 0;
}

static void event_reset(event_t* ev)
{
	ev->state = 0;
}

static void event_set(event_t* ev)
{
	if (ev->state)
	exit(1);
	__atomic_store_n(&ev->state, 1, __ATOMIC_RELEASE);
	syscall(SYS_futex, &ev->state, FUTEX_WAKE | FUTEX_PRIVATE_FLAG, 1000000);
}

static void event_wait(event_t* ev)
{
	while (!__atomic_load_n(&ev->state, __ATOMIC_ACQUIRE))
		syscall(SYS_futex, &ev->state, FUTEX_WAIT | FUTEX_PRIVATE_FLAG, 0, 0);
}

static int event_isset(event_t* ev)
{
	return __atomic_load_n(&ev->state, __ATOMIC_ACQUIRE);
}

static int event_timedwait(event_t* ev, uint64_t timeout)
{
	uint64_t start = current_time_ms();
	uint64_t now = start;
	for (;;) {
		uint64_t remain = timeout - (now - start);
		struct timespec ts;
		ts.tv_sec = remain / 1000;
		ts.tv_nsec = (remain % 1000) * 1000 * 1000;
		syscall(SYS_futex, &ev->state, FUTEX_WAIT | FUTEX_PRIVATE_FLAG, 0, &ts);
		if (__atomic_load_n(&ev->state, __ATOMIC_ACQUIRE))
			return 1;
		now = current_time_ms();
		if (now - start > timeout)
			return 0;
	}
}

static bool write_file(const char* file, const char* what, ...)
{
	char buf[1024];
	va_list args;
	va_start(args, what);
	vsnprintf(buf, sizeof(buf), what, args);
	va_end(args);
	buf[sizeof(buf) - 1] = 0;
	int len = strlen(buf);
	int fd = open(file, O_WRONLY | O_CLOEXEC);
	if (fd == -1)
		return false;
	if (write(fd, buf, len) != len) {
		int err = errno;
		close(fd);
		errno = err;
		return false;
	}
	close(fd);
	return true;
}

struct nlmsg {
	char* pos;
	int nesting;
	struct nlattr* nested[8];
	char buf[4096];
};

static void netlink_init(struct nlmsg* nlmsg, int typ, int flags,
			 const void* data, int size)
{
	memset(nlmsg, 0, sizeof(*nlmsg));
	struct nlmsghdr* hdr = (struct nlmsghdr*)nlmsg->buf;
	hdr->nlmsg_type = typ;
	hdr->nlmsg_flags = NLM_F_REQUEST | NLM_F_ACK | flags;
	memcpy(hdr + 1, data, size);
	nlmsg->pos = (char*)(hdr + 1) + NLMSG_ALIGN(size);
}

static void netlink_attr(struct nlmsg* nlmsg, int typ,
			 const void* data, int size)
{
	struct nlattr* attr = (struct nlattr*)nlmsg->pos;
	attr->nla_len = sizeof(*attr) + size;
	attr->nla_type = typ;
	if (size > 0)
		memcpy(attr + 1, data, size);
	nlmsg->pos += NLMSG_ALIGN(attr->nla_len);
}

static int netlink_send_ext(struct nlmsg* nlmsg, int sock,
			    uint16_t reply_type, int* reply_len, bool dofail)
{
	if (nlmsg->pos > nlmsg->buf + sizeof(nlmsg->buf) || nlmsg->nesting)
	exit(1);
	struct nlmsghdr* hdr = (struct nlmsghdr*)nlmsg->buf;
	hdr->nlmsg_len = nlmsg->pos - nlmsg->buf;
	struct sockaddr_nl addr;
	memset(&addr, 0, sizeof(addr));
	addr.nl_family = AF_NETLINK;
	ssize_t n = sendto(sock, nlmsg->buf, hdr->nlmsg_len, 0, (struct sockaddr*)&addr, sizeof(addr));
	if (n != (ssize_t)hdr->nlmsg_len) {
		if (dofail)
	exit(1);
		return -1;
	}
	n = recv(sock, nlmsg->buf, sizeof(nlmsg->buf), 0);
	if (reply_len)
		*reply_len = 0;
	if (n < 0) {
		if (dofail)
	exit(1);
		return -1;
	}
	if (n < (ssize_t)sizeof(struct nlmsghdr)) {
		errno = EINVAL;
		if (dofail)
	exit(1);
		return -1;
	}
	if (hdr->nlmsg_type == NLMSG_DONE)
		return 0;
	if (reply_len && hdr->nlmsg_type == reply_type) {
		*reply_len = n;
		return 0;
	}
	if (n < (ssize_t)(sizeof(struct nlmsghdr) + sizeof(struct nlmsgerr))) {
		errno = EINVAL;
		if (dofail)
	exit(1);
		return -1;
	}
	if (hdr->nlmsg_type != NLMSG_ERROR) {
		errno = EINVAL;
		if (dofail)
	exit(1);
		return -1;
	}
	errno = -((struct nlmsgerr*)(hdr + 1))->error;
	return -errno;
}

static int netlink_send(struct nlmsg* nlmsg, int sock)
{
	return netlink_send_ext(nlmsg, sock, 0, NULL, true);
}

static int netlink_query_family_id(struct nlmsg* nlmsg, int sock, const char* family_name, bool dofail)
{
	struct genlmsghdr genlhdr;
	memset(&genlhdr, 0, sizeof(genlhdr));
	genlhdr.cmd = CTRL_CMD_GETFAMILY;
	netlink_init(nlmsg, GENL_ID_CTRL, 0, &genlhdr, sizeof(genlhdr));
	netlink_attr(nlmsg, CTRL_ATTR_FAMILY_NAME, family_name, strnlen(family_name, GENL_NAMSIZ - 1) + 1);
	int n = 0;
	int err = netlink_send_ext(nlmsg, sock, GENL_ID_CTRL, &n, dofail);
	if (err < 0) {
		return -1;
	}
	uint16_t id = 0;
	struct nlattr* attr = (struct nlattr*)(nlmsg->buf + NLMSG_HDRLEN + NLMSG_ALIGN(sizeof(genlhdr)));
	for (; (char*)attr < nlmsg->buf + n; attr = (struct nlattr*)((char*)attr + NLMSG_ALIGN(attr->nla_len))) {
		if (attr->nla_type == CTRL_ATTR_FAMILY_ID) {
			id = *(uint16_t*)(attr + 1);
			break;
		}
	}
	if (!id) {
		errno = EINVAL;
		return -1;
	}
	recv(sock, nlmsg->buf, sizeof(nlmsg->buf), 0);
	return id;
}

static void netlink_device_change(struct nlmsg* nlmsg, int sock, const char* name, bool up,
				  const char* master, const void* mac, int macsize,
				  const char* new_name)
{
	struct ifinfomsg hdr;
	memset(&hdr, 0, sizeof(hdr));
	if (up)
		hdr.ifi_flags = hdr.ifi_change = IFF_UP;
	hdr.ifi_index = if_nametoindex(name);
	netlink_init(nlmsg, RTM_NEWLINK, 0, &hdr, sizeof(hdr));
	if (new_name)
		netlink_attr(nlmsg, IFLA_IFNAME, new_name, strlen(new_name));
	if (master) {
		int ifindex = if_nametoindex(master);
		netlink_attr(nlmsg, IFLA_MASTER, &ifindex, sizeof(ifindex));
	}
	if (macsize)
		netlink_attr(nlmsg, IFLA_ADDRESS, mac, macsize);
	int err = netlink_send(nlmsg, sock);
	if (err < 0) {
	}
}

static int netlink_add_addr(struct nlmsg* nlmsg, int sock, const char* dev,
			    const void* addr, int addrsize)
{
	struct ifaddrmsg hdr;
	memset(&hdr, 0, sizeof(hdr));
	hdr.ifa_family = addrsize == 4 ? AF_INET : AF_INET6;
	hdr.ifa_prefixlen = addrsize == 4 ? 24 : 120;
	hdr.ifa_scope = RT_SCOPE_UNIVERSE;
	hdr.ifa_index = if_nametoindex(dev);
	netlink_init(nlmsg, RTM_NEWADDR, NLM_F_CREATE | NLM_F_REPLACE, &hdr, sizeof(hdr));
	netlink_attr(nlmsg, IFA_LOCAL, addr, addrsize);
	netlink_attr(nlmsg, IFA_ADDRESS, addr, addrsize);
	return netlink_send(nlmsg, sock);
}

static void netlink_add_addr4(struct nlmsg* nlmsg, int sock,
			      const char* dev, const char* addr)
{
	struct in_addr in_addr;
	inet_pton(AF_INET, addr, &in_addr);
	int err = netlink_add_addr(nlmsg, sock, dev, &in_addr, sizeof(in_addr));
	if (err < 0) {
	}
}

static void netlink_add_addr6(struct nlmsg* nlmsg, int sock,
			      const char* dev, const char* addr)
{
	struct in6_addr in6_addr;
	inet_pton(AF_INET6, addr, &in6_addr);
	int err = netlink_add_addr(nlmsg, sock, dev, &in6_addr, sizeof(in6_addr));
	if (err < 0) {
	}
}

static void netlink_add_neigh(struct nlmsg* nlmsg, int sock, const char* name,
			      const void* addr, int addrsize, const void* mac, int macsize)
{
	struct ndmsg hdr;
	memset(&hdr, 0, sizeof(hdr));
	hdr.ndm_family = addrsize == 4 ? AF_INET : AF_INET6;
	hdr.ndm_ifindex = if_nametoindex(name);
	hdr.ndm_state = NUD_PERMANENT;
	netlink_init(nlmsg, RTM_NEWNEIGH, NLM_F_EXCL | NLM_F_CREATE, &hdr, sizeof(hdr));
	netlink_attr(nlmsg, NDA_DST, addr, addrsize);
	netlink_attr(nlmsg, NDA_LLADDR, mac, macsize);
	int err = netlink_send(nlmsg, sock);
	if (err < 0) {
	}
}

static struct nlmsg nlmsg;

static int tunfd = -1;

#define TUN_IFACE "syz_tun"
#define LOCAL_MAC 0xaaaaaaaaaaaa
#define REMOTE_MAC 0xaaaaaaaaaabb
#define LOCAL_IPV4 "172.20.20.170"
#define REMOTE_IPV4 "172.20.20.187"
#define LOCAL_IPV6 "fe80::aa"
#define REMOTE_IPV6 "fe80::bb"

#define IFF_NAPI 0x0010

static void initialize_tun(void)
{
	tunfd = open("/dev/net/tun", O_RDWR | O_NONBLOCK);
	if (tunfd == -1) {
		printf("tun: can't open /dev/net/tun: please enable CONFIG_TUN=y\n");
		printf("otherwise fuzzing or reproducing might not work as intended\n");
		return;
	}
	const int kTunFd = 200;
	if (dup2(tunfd, kTunFd) < 0)
	exit(1);
	close(tunfd);
	tunfd = kTunFd;
	struct ifreq ifr;
	memset(&ifr, 0, sizeof(ifr));
	strncpy(ifr.ifr_name, TUN_IFACE, IFNAMSIZ);
	ifr.ifr_flags = IFF_TAP | IFF_NO_PI;
	if (ioctl(tunfd, TUNSETIFF, (void*)&ifr) < 0) {
	exit(1);
	}
	char sysctl[64];
	sprintf(sysctl, "/proc/sys/net/ipv6/conf/%s/accept_dad", TUN_IFACE);
	write_file(sysctl, "0");
	sprintf(sysctl, "/proc/sys/net/ipv6/conf/%s/router_solicitations", TUN_IFACE);
	write_file(sysctl, "0");
	int sock = socket(AF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
	if (sock == -1)
	exit(1);
	netlink_add_addr4(&nlmsg, sock, TUN_IFACE, LOCAL_IPV4);
	netlink_add_addr6(&nlmsg, sock, TUN_IFACE, LOCAL_IPV6);
	uint64_t macaddr = REMOTE_MAC;
	struct in_addr in_addr;
	inet_pton(AF_INET, REMOTE_IPV4, &in_addr);
	netlink_add_neigh(&nlmsg, sock, TUN_IFACE, &in_addr, sizeof(in_addr), &macaddr, ETH_ALEN);
	struct in6_addr in6_addr;
	inet_pton(AF_INET6, REMOTE_IPV6, &in6_addr);
	netlink_add_neigh(&nlmsg, sock, TUN_IFACE, &in6_addr, sizeof(in6_addr), &macaddr, ETH_ALEN);
	macaddr = LOCAL_MAC;
	netlink_device_change(&nlmsg, sock, TUN_IFACE, true, 0, &macaddr, ETH_ALEN, NULL);
	close(sock);
}

static int read_tun(char* data, int size)
{
	if (tunfd < 0)
		return -1;
	int rv = read(tunfd, data, size);
	if (rv < 0) {
		if (errno == EAGAIN || errno == EBADF || errno == EBADFD)
			return -1;
	exit(1);
	}
	return rv;
}

static void flush_tun()
{
	char data[1000];
	while (read_tun(&data[0], sizeof(data)) != -1) {
	}
}

#define MAX_FDS 30

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
	unsigned char* out;
	unsigned long outlen;
	unsigned long outcnt;
	const unsigned char* in;
	unsigned long inlen;
	unsigned long incnt;
	int bitbuf;
	int bitcnt;
	jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
	long val = s->bitbuf;
	while (s->bitcnt < need) {
		if (s->incnt == s->inlen)
			longjmp(s->env, 1);
		val |= (long)(s->in[s->incnt++]) << s->bitcnt;
		s->bitcnt += 8;
	}
	s->bitbuf = (int)(val >> need);
	s->bitcnt -= need;
	return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
	s->bitbuf = 0;
	s->bitcnt = 0;
	if (s->incnt + 4 > s->inlen)
		return 2;
	unsigned len = s->in[s->incnt++];
	len |= s->in[s->incnt++] << 8;
	if (s->in[s->incnt++] != (~len & 0xff) ||
	    s->in[s->incnt++] != ((~len >> 8) & 0xff))
		return -2;
	if (s->incnt + len > s->inlen)
		return 2;
	if (s->outcnt + len > s->outlen)
		return 1;
	for (; len--; s->outcnt++, s->incnt++) {
		if (s->in[s->incnt])
			s->out[s->outcnt] = s->in[s->incnt];
	}
	return 0;
}
struct puff_huffman {
	short* count;
	short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
	int first = 0;
	int index = 0;
	int bitbuf = s->bitbuf;
	int left = s->bitcnt;
	int code = first = index = 0;
	int len = 1;
	short* next = h->count + 1;
	while (1) {
		while (left--) {
			code |= bitbuf & 1;
			bitbuf >>= 1;
			int count = *next++;
			if (code - count < first) {
				s->bitbuf = bitbuf;
				s->bitcnt = (s->bitcnt - len) & 7;
				return h->symbol[index + (code - first)];
			}
			index += count;
			first += count;
			first <<= 1;
			code <<= 1;
			len++;
		}
		left = (MAXBITS + 1) - len;
		if (left == 0)
			break;
		if (s->incnt == s->inlen)
			longjmp(s->env, 1);
		bitbuf = s->in[s->incnt++];
		if (left > 8)
			left = 8;
	}
	return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
	int len;
	for (len = 0; len <= MAXBITS; len++)
		h->count[len] = 0;
	int symbol;
	for (symbol = 0; symbol < n; symbol++)
		(h->count[length[symbol]])++;
	if (h->count[0] == n)
		return 0;
	int left = 1;
	for (len = 1; len <= MAXBITS; len++) {
		left <<= 1;
		left -= h->count[len];
		if (left < 0)
			return left;
	}
	short offs[MAXBITS + 1];
	offs[1] = 0;
	for (len = 1; len < MAXBITS; len++)
		offs[len + 1] = offs[len] + h->count[len];
	for (symbol = 0; symbol < n; symbol++)
		if (length[symbol] != 0)
			h->symbol[offs[length[symbol]]++] = symbol;
	return left;
}
static int puff_codes(struct puff_state* s,
		      const struct puff_huffman* lencode,
		      const struct puff_huffman* distcode)
{
	static const short lens[29] = {
				       3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
				       35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258};
	static const short lext[29] = {
				       0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
				       3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
	static const short dists[30] = {
					1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
					257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
					8193, 12289, 16385, 24577};
	static const short dext[30] = {
				       0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
				       7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
				       12, 12, 13, 13};
	int symbol;
	do {
		symbol = puff_decode(s, lencode);
		if (symbol < 0)
			return symbol;
		if (symbol < 256) {
			if (s->outcnt == s->outlen)
				return 1;
			if (symbol)
				s->out[s->outcnt] = symbol;
			s->outcnt++;
		} else if (symbol > 256) {
			symbol -= 257;
			if (symbol >= 29)
				return -10;
			int len = lens[symbol] + puff_bits(s, lext[symbol]);
			symbol = puff_decode(s, distcode);
			if (symbol < 0)
				return symbol;
			unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
			if (dist > s->outcnt)
				return -11;
			if (s->outcnt + len > s->outlen)
				return 1;
			while (len--) {
				if (dist <= s->outcnt && s->out[s->outcnt - dist])
					s->out[s->outcnt] = s->out[s->outcnt - dist];
				s->outcnt++;
			}
		}
	} while (symbol != 256);
	return 0;
}
static int puff_fixed(struct puff_state* s)
{
	static int virgin = 1;
	static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
	static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
	static struct puff_huffman lencode, distcode;
	if (virgin) {
		lencode.count = lencnt;
		lencode.symbol = lensym;
		distcode.count = distcnt;
		distcode.symbol = distsym;
		short lengths[FIXLCODES];
		int symbol;
		for (symbol = 0; symbol < 144; symbol++)
			lengths[symbol] = 8;
		for (; symbol < 256; symbol++)
			lengths[symbol] = 9;
		for (; symbol < 280; symbol++)
			lengths[symbol] = 7;
		for (; symbol < FIXLCODES; symbol++)
			lengths[symbol] = 8;
		puff_construct(&lencode, lengths, FIXLCODES);
		for (symbol = 0; symbol < MAXDCODES; symbol++)
			lengths[symbol] = 5;
		puff_construct(&distcode, lengths, MAXDCODES);
		virgin = 0;
	}
	return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
	static const short order[19] =
	    {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
	int nlen = puff_bits(s, 5) + 257;
	int ndist = puff_bits(s, 5) + 1;
	int ncode = puff_bits(s, 4) + 4;
	if (nlen > MAXLCODES || ndist > MAXDCODES)
		return -3;
	short lengths[MAXCODES];
	int index;
	for (index = 0; index < ncode; index++)
		lengths[order[index]] = puff_bits(s, 3);
	for (; index < 19; index++)
		lengths[order[index]] = 0;
	short lencnt[MAXBITS + 1], lensym[MAXLCODES];
	struct puff_huffman lencode = {lencnt, lensym};
	int err = puff_construct(&lencode, lengths, 19);
	if (err != 0)
		return -4;
	index = 0;
	while (index < nlen + ndist) {
		int symbol;
		int len;
		symbol = puff_decode(s, &lencode);
		if (symbol < 0)
			return symbol;
		if (symbol < 16)
			lengths[index++] = symbol;
		else {
			len = 0;
			if (symbol == 16) {
				if (index == 0)
					return -5;
				len = lengths[index - 1];
				symbol = 3 + puff_bits(s, 2);
			} else if (symbol == 17)
				symbol = 3 + puff_bits(s, 3);
			else
				symbol = 11 + puff_bits(s, 7);
			if (index + symbol > nlen + ndist)
				return -6;
			while (symbol--)
				lengths[index++] = len;
		}
	}
	if (lengths[256] == 0)
		return -9;
	err = puff_construct(&lencode, lengths, nlen);
	if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
		return -7;
	short distcnt[MAXBITS + 1], distsym[MAXDCODES];
	struct puff_huffman distcode = {distcnt, distsym};
	err = puff_construct(&distcode, lengths + nlen, ndist);
	if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
		return -8;
	return puff_codes(s, &lencode, &distcode);
}
static int puff(
    unsigned char* dest,
    unsigned long* destlen,
    const unsigned char* source,
    unsigned long sourcelen)
{
	struct puff_state s = {
	    .out = dest,
	    .outlen = *destlen,
	    .outcnt = 0,
	    .in = source,
	    .inlen = sourcelen,
	    .incnt = 0,
	    .bitbuf = 0,
	    .bitcnt = 0,
	};
	int err;
	if (setjmp(s.env) != 0)
		err = 2;
	else {
		int last;
		do {
			last = puff_bits(&s, 1);
			int type = puff_bits(&s, 2);
			err = type == 0 ? puff_stored(&s) : (type == 1 ? puff_fixed(&s) : (type == 2 ? puff_dynamic(&s) : -1));
			if (err != 0)
				break;
		} while (!last);
	}
	*destlen = s.outcnt;
	return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source, unsigned long sourcelen, int dest_fd)
{
	if (sourcelen < ZLIB_HEADER_WIDTH)
		return 0;
	source += ZLIB_HEADER_WIDTH;
	sourcelen -= ZLIB_HEADER_WIDTH;
	const unsigned long max_destlen = 132 << 20;
	void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ, MAP_PRIVATE | MAP_ANON, -1, 0);
	if (ret == MAP_FAILED)
		return -1;
	unsigned char* dest = (unsigned char*)ret;
	unsigned long destlen = max_destlen;
	int err = puff(dest, &destlen, source, sourcelen);
	if (err) {
		munmap(dest, max_destlen);
		errno = -err;
		return -1;
	}
	if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
		munmap(dest, max_destlen);
		return -1;
	}
	return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size, const char* loopname, int* loopfd_p)
{
	int err = 0, loopfd = -1;
	int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
	if (memfd == -1) {
		err = errno;
		goto error;
	}
	if (puff_zlib_to_file(data, size, memfd)) {
		err = errno;
		goto error_close_memfd;
	}
	loopfd = open(loopname, O_RDWR);
	if (loopfd == -1) {
		err = errno;
		goto error_close_memfd;
	}
	if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
		if (errno != EBUSY) {
			err = errno;
			goto error_close_loop;
		}
		ioctl(loopfd, LOOP_CLR_FD, 0);
		usleep(1000);
		if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
			err = errno;
			goto error_close_loop;
		}
	}
	close(memfd);
	*loopfd_p = loopfd;
	return 0;

error_close_loop:
	close(loopfd);
error_close_memfd:
	close(memfd);
error:
	errno = err;
	return -1;
}

static void reset_loop_device(const char* loopname)
{
	int loopfd = open(loopname, O_RDWR);
	if (loopfd == -1) {
		return;
	}
	if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
	}
	close(loopfd);
}

static long syz_mount_image(
    volatile long fsarg,
    volatile long dir,
    volatile long flags,
    volatile long optsarg,
    volatile long change_dir,
    volatile unsigned long size,
    volatile long image)
{
	unsigned char* data = (unsigned char*)image;
	int res = -1, err = 0, need_loop_device = !!size;
	char* mount_opts = (char*)optsarg;
	char* target = (char*)dir;
	char* fs = (char*)fsarg;
	char* source = NULL;
	char loopname[64];
	if (need_loop_device) {
		int loopfd;
		memset(loopname, 0, sizeof(loopname));
		snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
		if (setup_loop_device(data, size, loopname, &loopfd) == -1)
			return -1;
		close(loopfd);
		source = loopname;
	}
	mkdir(target, 0777);
	char opts[256];
	memset(opts, 0, sizeof(opts));
	if (strlen(mount_opts) > (sizeof(opts) - 32)) {
	}
	strncpy(opts, mount_opts, sizeof(opts) - 32);
	if (strcmp(fs, "iso9660") == 0) {
		flags |= MS_RDONLY;
	} else if (strncmp(fs, "ext", 3) == 0) {
		bool has_remount_ro = false;
		char* remount_ro_start = strstr(opts, "errors=remount-ro");
		if (remount_ro_start != NULL) {
			char after = *(remount_ro_start + strlen("errors=remount-ro"));
			char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
			has_remount_ro = ((before == '\0' || before == ',') && (after == '\0' || after == ','));
		}
		if (strstr(opts, "errors=panic") || !has_remount_ro)
			strcat(opts, ",errors=continue");
	} else if (strcmp(fs, "xfs") == 0) {
		strcat(opts, ",nouuid");
	}
	res = mount(source, target, fs, flags, opts);
	if (res == -1) {
		err = errno;
		goto error_clear_loop;
	}
	res = open(target, O_RDONLY | O_DIRECTORY);
	if (res == -1) {
		err = errno;
		goto error_clear_loop;
	}
	if (change_dir) {
		res = chdir(target);
		if (res == -1) {
			err = errno;
		}
	}

error_clear_loop:
	if (need_loop_device)
		reset_loop_device(loopname);
	errno = err;
	return res;
}

static void mount_cgroups(const char* dir, const char** controllers, int count)
{
	if (mkdir(dir, 0777)) {
		return;
	}
	char enabled[128] = {0};
	int i = 0;
	for (; i < count; i++) {
		if (mount("none", dir, "cgroup", 0, controllers[i])) {
			continue;
		}
		umount(dir);
		strcat(enabled, ",");
		strcat(enabled, controllers[i]);
	}
	if (enabled[0] == 0) {
		if (rmdir(dir) && errno != EBUSY)
	exit(1);
		return;
	}
	if (mount("none", dir, "cgroup", 0, enabled + 1)) {
		if (rmdir(dir) && errno != EBUSY)
	exit(1);
	}
	if (chmod(dir, 0777)) {
	}
}

static void mount_cgroups2(const char** controllers, int count)
{
	if (mkdir("/syzcgroup/unified", 0777)) {
		return;
	}
	if (mount("none", "/syzcgroup/unified", "cgroup2", 0, NULL)) {
		if (rmdir("/syzcgroup/unified") && errno != EBUSY)
	exit(1);
		return;
	}
	if (chmod("/syzcgroup/unified", 0777)) {
	}
	int control = open("/syzcgroup/unified/cgroup.subtree_control", O_WRONLY);
	if (control == -1)
		return;
	int i;
	for (i = 0; i < count; i++)
		if (write(control, controllers[i], strlen(controllers[i])) < 0) {
		}
	close(control);
}

static void setup_cgroups()
{
	const char* unified_controllers[] = {"+cpu", "+io", "+pids"};
	const char* net_controllers[] = {"net", "net_prio", "devices", "blkio", "freezer"};
	const char* cpu_controllers[] = {"cpuset", "cpuacct", "hugetlb", "rlimit", "memory"};
	if (mkdir("/syzcgroup", 0777)) {
		return;
	}
	mount_cgroups2(unified_controllers, sizeof(unified_controllers) / sizeof(unified_controllers[0]));
	mount_cgroups("/syzcgroup/net", net_controllers, sizeof(net_controllers) / sizeof(net_controllers[0]));
	mount_cgroups("/syzcgroup/cpu", cpu_controllers, sizeof(cpu_controllers) / sizeof(cpu_controllers[0]));
	write_file("/syzcgroup/cpu/cgroup.clone_children", "1");
	write_file("/syzcgroup/cpu/cpuset.memory_pressure_enabled", "1");
}

static void setup_cgroups_loop()
{
	int pid = getpid();
	char file[128];
	char cgroupdir[64];
	snprintf(cgroupdir, sizeof(cgroupdir), "/syzcgroup/unified/syz%llu", procid);
	if (mkdir(cgroupdir, 0777)) {
	}
	snprintf(file, sizeof(file), "%s/pids.max", cgroupdir);
	write_file(file, "32");
	snprintf(file, sizeof(file), "%s/cgroup.procs", cgroupdir);
	write_file(file, "%d", pid);
	snprintf(cgroupdir, sizeof(cgroupdir), "/syzcgroup/cpu/syz%llu", procid);
	if (mkdir(cgroupdir, 0777)) {
	}
	snprintf(file, sizeof(file), "%s/cgroup.procs", cgroupdir);
	write_file(file, "%d", pid);
	snprintf(file, sizeof(file), "%s/memory.soft_limit_in_bytes", cgroupdir);
	write_file(file, "%d", 299 << 20);
	snprintf(file, sizeof(file), "%s/memory.limit_in_bytes", cgroupdir);
	write_file(file, "%d", 300 << 20);
	snprintf(cgroupdir, sizeof(cgroupdir), "/syzcgroup/net/syz%llu", procid);
	if (mkdir(cgroupdir, 0777)) {
	}
	snprintf(file, sizeof(file), "%s/cgroup.procs", cgroupdir);
	write_file(file, "%d", pid);
}

static void setup_cgroups_test()
{
	char cgroupdir[64];
	snprintf(cgroupdir, sizeof(cgroupdir), "/syzcgroup/unified/syz%llu", procid);
	if (symlink(cgroupdir, "./cgroup")) {
	}
	snprintf(cgroupdir, sizeof(cgroupdir), "/syzcgroup/cpu/syz%llu", procid);
	if (symlink(cgroupdir, "./cgroup.cpu")) {
	}
	snprintf(cgroupdir, sizeof(cgroupdir), "/syzcgroup/net/syz%llu", procid);
	if (symlink(cgroupdir, "./cgroup.net")) {
	}
}

static void initialize_cgroups()
{
	if (mkdir("./syz-tmp/newroot/syzcgroup", 0700))
	exit(1);
	if (mkdir("./syz-tmp/newroot/syzcgroup/unified", 0700))
	exit(1);
	if (mkdir("./syz-tmp/newroot/syzcgroup/cpu", 0700))
	exit(1);
	if (mkdir("./syz-tmp/newroot/syzcgroup/net", 0700))
	exit(1);
	unsigned bind_mount_flags = MS_BIND | MS_REC | MS_PRIVATE;
	if (mount("/syzcgroup/unified", "./syz-tmp/newroot/syzcgroup/unified", NULL, bind_mount_flags, NULL)) {
	}
	if (mount("/syzcgroup/cpu", "./syz-tmp/newroot/syzcgroup/cpu", NULL, bind_mount_flags, NULL)) {
	}
	if (mount("/syzcgroup/net", "./syz-tmp/newroot/syzcgroup/net", NULL, bind_mount_flags, NULL)) {
	}
}

static void setup_binderfs();
static void setup_fusectl();
static void sandbox_common_mount_tmpfs(void)
{
	write_file("/proc/sys/fs/mount-max", "100000");
	if (mkdir("./syz-tmp", 0777))
	exit(1);
	if (mount("", "./syz-tmp", "tmpfs", 0, NULL))
	exit(1);
	if (mkdir("./syz-tmp/newroot", 0777))
	exit(1);
	if (mkdir("./syz-tmp/newroot/dev", 0700))
	exit(1);
	unsigned bind_mount_flags = MS_BIND | MS_REC | MS_PRIVATE;
	if (mount("/dev", "./syz-tmp/newroot/dev", NULL, bind_mount_flags, NULL))
	exit(1);
	if (mkdir("./syz-tmp/newroot/proc", 0700))
	exit(1);
	if (mount("syz-proc", "./syz-tmp/newroot/proc", "proc", 0, NULL))
	exit(1);
	if (mkdir("./syz-tmp/newroot/selinux", 0700))
	exit(1);
	const char* selinux_path = "./syz-tmp/newroot/selinux";
	if (mount("/selinux", selinux_path, NULL, bind_mount_flags, NULL)) {
		if (errno != ENOENT)
	exit(1);
		if (mount("/sys/fs/selinux", selinux_path, NULL, bind_mount_flags, NULL) && errno != ENOENT)
	exit(1);
	}
	if (mkdir("./syz-tmp/newroot/sys", 0700))
	exit(1);
	if (mount("/sys", "./syz-tmp/newroot/sys", 0, bind_mount_flags, NULL))
	exit(1);
	if (mount("/sys/kernel/debug", "./syz-tmp/newroot/sys/kernel/debug", NULL, bind_mount_flags, NULL) && errno != ENOENT)
	exit(1);
	if (mount("/sys/fs/smackfs", "./syz-tmp/newroot/sys/fs/smackfs", NULL, bind_mount_flags, NULL) && errno != ENOENT)
	exit(1);
	if (mount("/proc/sys/fs/binfmt_misc", "./syz-tmp/newroot/proc/sys/fs/binfmt_misc", NULL, bind_mount_flags, NULL) && errno != ENOENT)
	exit(1);
	initialize_cgroups();
	if (mkdir("./syz-tmp/pivot", 0777))
	exit(1);
	if (syscall(SYS_pivot_root, "./syz-tmp", "./syz-tmp/pivot")) {
		if (chdir("./syz-tmp"))
	exit(1);
	} else {
		if (chdir("/"))
	exit(1);
		if (umount2("./pivot", MNT_DETACH))
	exit(1);
	}
	if (chroot("./newroot"))
	exit(1);
	if (chdir("/"))
	exit(1);
	setup_binderfs();
	setup_fusectl();
}

static void setup_fusectl()
{
	if (mount(0, "/sys/fs/fuse/connections", "fusectl", 0, 0)) {
	}
}

static void setup_binderfs()
{
	if (mkdir("/dev/binderfs", 0777)) {
	}
	if (mount("binder", "/dev/binderfs", "binder", 0, NULL)) {
	}
}

static void loop();

static void sandbox_common()
{
	prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
	if (getppid() == 1)
	exit(1);
	struct rlimit rlim;
	rlim.rlim_cur = rlim.rlim_max = (200 << 20);
	setrlimit(RLIMIT_AS, &rlim);
	rlim.rlim_cur = rlim.rlim_max = 32 << 20;
	setrlimit(RLIMIT_MEMLOCK, &rlim);
	rlim.rlim_cur = rlim.rlim_max = 136 << 20;
	setrlimit(RLIMIT_FSIZE, &rlim);
	rlim.rlim_cur = rlim.rlim_max = 1 << 20;
	setrlimit(RLIMIT_STACK, &rlim);
	rlim.rlim_cur = rlim.rlim_max = 128 << 20;
	setrlimit(RLIMIT_CORE, &rlim);
	rlim.rlim_cur = rlim.rlim_max = 256;
	setrlimit(RLIMIT_NOFILE, &rlim);
	if (unshare(CLONE_NEWNS)) {
	}
	if (mount(NULL, "/", NULL, MS_REC | MS_PRIVATE, NULL)) {
	}
	if (unshare(CLONE_NEWIPC)) {
	}
	if (unshare(0x02000000)) {
	}
	if (unshare(CLONE_NEWUTS)) {
	}
	if (unshare(CLONE_SYSVSEM)) {
	}
	typedef struct {
		const char* name;
		const char* value;
	} sysctl_t;
	static const sysctl_t sysctls[] = {
	    {"/proc/sys/kernel/shmmax", "16777216"},
	    {"/proc/sys/kernel/shmall", "536870912"},
	    {"/proc/sys/kernel/shmmni", "1024"},
	    {"/proc/sys/kernel/msgmax", "8192"},
	    {"/proc/sys/kernel/msgmni", "1024"},
	    {"/proc/sys/kernel/msgmnb", "1024"},
	    {"/proc/sys/kernel/sem", "1024 1048576 500 1024"},
	};
	unsigned i;
	for (i = 0; i < sizeof(sysctls) / sizeof(sysctls[0]); i++)
		write_file(sysctls[i].name, sysctls[i].value);
}

static int wait_for_loop(int pid)
{
	if (pid < 0)
	exit(1);
	int status = 0;
	while (waitpid(-1, &status, __WALL) != pid) {
	}
	return WEXITSTATUS(status);
}

static void drop_caps(void)
{
	struct __user_cap_header_struct cap_hdr = {};
	struct __user_cap_data_struct cap_data[2] = {};
	cap_hdr.version = _LINUX_CAPABILITY_VERSION_3;
	cap_hdr.pid = getpid();
	if (syscall(SYS_capget, &cap_hdr, &cap_data))
	exit(1);
	const int drop = (1 << CAP_SYS_PTRACE) | (1 << CAP_SYS_NICE);
	cap_data[0].effective &= ~drop;
	cap_data[0].permitted &= ~drop;
	cap_data[0].inheritable &= ~drop;
	if (syscall(SYS_capset, &cap_hdr, &cap_data))
	exit(1);
}

static int do_sandbox_none(void)
{
	if (unshare(CLONE_NEWPID)) {
	}
	int pid = fork();
	if (pid != 0)
		return wait_for_loop(pid);
	sandbox_common();
	drop_caps();
	if (unshare(CLONE_NEWNET)) {
	}
	write_file("/proc/sys/net/ipv4/ping_group_range", "0 65535");
	initialize_tun();
	sandbox_common_mount_tmpfs();
	loop();
	exit(1);
}

#define FS_IOC_SETFLAGS _IOW('f', 2, long)
static void remove_dir(const char* dir)
{
	int iter = 0;
	DIR* dp = 0;
	const int umount_flags = MNT_FORCE | UMOUNT_NOFOLLOW;

retry:
		while (umount2(dir, umount_flags) == 0) {
		}
	dp = opendir(dir);
	if (dp == NULL) {
		if (errno == EMFILE) {
	exit(1);
		}
	exit(1);
	}
	struct dirent* ep = 0;
	while ((ep = readdir(dp))) {
		if (strcmp(ep->d_name, ".") == 0 || strcmp(ep->d_name, "..") == 0)
			continue;
		char filename[FILENAME_MAX];
		snprintf(filename, sizeof(filename), "%s/%s", dir, ep->d_name);
			while (umount2(filename, umount_flags) == 0) {
			}
		struct stat st;
		if (lstat(filename, &st))
	exit(1);
		if (S_ISDIR(st.st_mode)) {
			remove_dir(filename);
			continue;
		}
		int i;
		for (i = 0;; i++) {
			if (unlink(filename) == 0)
				break;
			if (errno == EPERM) {
				int fd = open(filename, O_RDONLY);
				if (fd != -1) {
					long flags = 0;
					if (ioctl(fd, FS_IOC_SETFLAGS, &flags) == 0) {
					}
					close(fd);
					continue;
				}
			}
			if (errno == EROFS) {
				break;
			}
			if (errno != EBUSY || i > 100)
	exit(1);
				if (umount2(filename, umount_flags))
	exit(1);
		}
	}
	closedir(dp);
	for (int i = 0;; i++) {
		if (rmdir(dir) == 0)
			break;
		if (i < 100) {
			if (errno == EPERM) {
				int fd = open(dir, O_RDONLY);
				if (fd != -1) {
					long flags = 0;
					if (ioctl(fd, FS_IOC_SETFLAGS, &flags) == 0) {
					}
					close(fd);
					continue;
				}
			}
			if (errno == EROFS) {
				break;
			}
			if (errno == EBUSY) {
					if (umount2(dir, umount_flags))
	exit(1);
				continue;
			}
			if (errno == ENOTEMPTY) {
				if (iter < 100) {
					iter++;
					goto retry;
				}
			}
		}
	exit(1);
	}
}

static void kill_and_wait(int pid, int* status)
{
	kill(-pid, SIGKILL);
	kill(pid, SIGKILL);
	for (int i = 0; i < 100; i++) {
		if (waitpid(-1, status, WNOHANG | __WALL) == pid)
			return;
		usleep(1000);
	}
	DIR* dir = opendir("/sys/fs/fuse/connections");
	if (dir) {
		for (;;) {
			struct dirent* ent = readdir(dir);
			if (!ent)
				break;
			if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
				continue;
			char abort[300];
			snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort", ent->d_name);
			int fd = open(abort, O_WRONLY);
			if (fd == -1) {
				continue;
			}
			if (write(fd, abort, 1) < 0) {
			}
			close(fd);
		}
		closedir(dir);
	} else {
	}
	while (waitpid(-1, status, __WALL) != pid) {
	}
}

static void setup_loop()
{
	setup_cgroups_loop();
}

static void reset_loop()
{
	char buf[64];
	snprintf(buf, sizeof(buf), "/dev/loop%llu", procid);
	int loopfd = open(buf, O_RDWR);
	if (loopfd != -1) {
		ioctl(loopfd, LOOP_CLR_FD, 0);
		close(loopfd);
	}
}

static void setup_test()
{
	prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
	setpgrp();
	setup_cgroups_test();
	write_file("/proc/self/oom_score_adj", "1000");
	flush_tun();
	if (symlink("/dev/binderfs", "./binderfs")) {
	}
}

static void close_fds()
{
	for (int fd = 3; fd < MAX_FDS; fd++)
		close(fd);
}

struct thread_t {
	int created, call;
	event_t ready, done;
};

static struct thread_t threads[16];
static void execute_call(int call);
static int running;

static void* thr(void* arg)
{
	struct thread_t* th = (struct thread_t*)arg;
	for (;;) {
		event_wait(&th->ready);
		event_reset(&th->ready);
		execute_call(th->call);
		__atomic_fetch_sub(&running, 1, __ATOMIC_RELAXED);
		event_set(&th->done);
	}
	return 0;
}

static void execute_one(void)
{
	if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
	}
	int i, call, thread;
	for (call = 0; call < 5; call++) {
		for (thread = 0; thread < (int)(sizeof(threads) / sizeof(threads[0])); thread++) {
			struct thread_t* th = &threads[thread];
			if (!th->created) {
				th->created = 1;
				event_init(&th->ready);
				event_init(&th->done);
				event_set(&th->done);
				thread_start(thr, th);
			}
			if (!event_isset(&th->done))
				continue;
			event_reset(&th->done);
			th->call = call;
			__atomic_fetch_add(&running, 1, __ATOMIC_RELAXED);
			event_set(&th->ready);
			event_timedwait(&th->done, 50 + (call == 0 ? 4000 : 0));
			break;
		}
	}
	for (i = 0; i < 100 && __atomic_load_n(&running, __ATOMIC_RELAXED); i++)
		sleep_ms(1);
	close_fds();
}

static void execute_one(void);

#define WAIT_FLAGS __WALL

static void loop(void)
{
	setup_loop();
	int iter = 0;
	for (;; iter++) {
		char cwdbuf[32];
		sprintf(cwdbuf, "./%d", iter);
		if (mkdir(cwdbuf, 0777))
	exit(1);
		reset_loop();
		int pid = fork();
		if (pid < 0)
	exit(1);
		if (pid == 0) {
			if (chdir(cwdbuf))
	exit(1);
			setup_test();
			execute_one();
			exit(0);
		}
		int status = 0;
		uint64_t start = current_time_ms();
		for (;;) {
			sleep_ms(10);
			if (waitpid(-1, &status, WNOHANG | WAIT_FLAGS) == pid)
				break;
			if (current_time_ms() - start < 5000)
				continue;
			kill_and_wait(pid, &status);
			break;
		}
		remove_dir(cwdbuf);
	}
}

uint64_t r[1] = {0xffffffffffffffff};

void execute_call(int call)
{
		intptr_t res = 0;
	switch (call) {
	case 0:
memcpy((void*)0x20005e00, "jfs\000", 4);
memcpy((void*)0x20005e40, "./bus\000", 6);
memcpy((void*)0x20000140, "\x00\xad\x3c\xd1\x6f\x83\xe5\xf4\xba\x3c\x5e\x63\x70\x3f\x3e\x90\x6e\x35\xb1\x49\xf3\x01\x10\x45\x1c\xf7\xe2\x6d\xdf\xfc\x69\x86\xb2\x04\x53\x7f\xcd\x54\xb9\xc5\x07\x61\x0a\x22\xc9\x3c\x64", 47);
memcpy((void*)0x2000bd40, "\x78\x9c\xec\xdd\x4d\x6f\x1d\x57\xfd\x07\xf0\xdf\x7d\xf4\x43\xfe\x4d\xad\x2e\xaa\xfe\x23\x84\xdc\xb4\x3c\x94\xd2\x3c\x96\x10\x28\xd0\x76\x01\x0b\x36\x2c\x50\xb6\x28\x91\xeb\x56\x11\x29\xa0\x24\xa0\xb4\x8a\x88\x2b\x6f\x58\xf0\x22\x40\x48\x2c\x11\x62\xc9\x8a\x17\xd0\x05\x5b\x76\xbc\x00\x22\x25\x48\xa0\xae\x18\x34\xf6\x39\xf1\x78\x72\x9d\xeb\xe0\xf8\xce\xb5\xcf\xe7\x23\x39\x33\xbf\x39\x33\xbe\x67\xf2\xbd\x8f\x9e\x99\x7b\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\xef\x7f\xef\x87\xe7\x7b\x11\x71\xf5\x17\x69\xc1\x4a\xc4\xff\xc5\x20\xa2\x1f\xb1\x54\xd7\xab\x11\xb1\xb4\xba\x92\xd7\x1f\x46\xc4\x4b\xb1\xd5\x1c\x2f\x46\xc4\x68\x21\xa2\xde\x7e\xeb\x9f\xe7\x23\xde\x8c\x88\x4f\x4f\x46\x3c\x78\x38\x58\xab\x17\x5f\xd8\x67\x3f\xbe\xfb\xc7\xbf\xfd\xee\x47\x27\x7e\xf0\xd7\x3f\x8c\xce\xfe\xfb\x4f\xb7\x07\x6f\xed\xb5\xde\x9d\x3b\xbf\xfe\xd7\x9f\xef\x1d\x6c\x9f\x01\x00\x00\xa0\x34\x55\x55\x55\xbd\xf4\x31\xff\x54\xfa\x7c\xdf\xef\xba\x53\x00\xc0\x4c\xe4\xd7\xff\x2a\xc9\xcb\xd5\xf3\x53\x0f\xe6\xac\x3f\x6a\xf5\xac\xea\xc5\x39\xeb\x8f\x5a\x7d\x1c\xea\xa6\x6a\xb2\x7b\xcd\x22\x22\x36\x9a\xdb\xd4\xef\x19\x1c\x8e\x07\x80\x23\x66\x23\x3e\xeb\xba\x0b\x74\x48\xfe\x45\x1b\x46\xc4\x89\xae\x3b\x01\xcc\xb5\x5e\xd7\x1d\xe0\x50\x3c\x78\x78\x77\xad\x97\xf2\xed\x35\x5f\x0f\x56\xb7\xdb\xf3\xb9\x20\xbb\xf2\xdf\xe8\x6d\x6d\x97\xb7\x9f\x34\x9d\xa6\x7d\x8e\xc9\xac\xee\x5f\x9b\x31\x88\x17\xf6\xe8\xcf\xd2\x8c\xfa\x30\x4f\x72\xfe\xfd\x76\xfe\x57\xb7\xdb\xc7\x69\xbd\xc3\xce\x7f\x56\xf6\xca\x7f\xbc\x7d\xe9\x53\x71\x72\xfe\x83\x76\xfe\x2d\xc7\x27\xff\xfe\xc4\xfc\x4b\x95\xf3\x1f\x3e\x55\xfe\x03\xf9\x03\x00\x00\x00\x00\xc0\x1c\xcb\x7f\xff\x5f\xe9\xf8\xf8\xef\xc2\xc1\x77\x65\x5f\x9e\x74\xfc\x77\x75\x46\x7d\x00\x00\x00\x00\x00\x00\x00\x80\x67\xed\xa0\xe3\xff\x3d\xf2\xd8\xf8\x7f\x77\x8d\xff\x07\x00\x00\x00\x73\xa2\xfe\xac\x5e\xfb\xcd\xc9\x9d\x65\x7b\x7d\x17\x5b\xbd\xfc\x4a\x2f\xe2\xb9\xd6\xfa\x40\x61\xd2\xc5\x32\xcb\x5d\xf7\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4a\x32\xdc\x3e\x87\xf7\x4a\x2f\x62\x14\x11\xcf\x2d\x2f\x57\x55\x55\xff\x34\xb5\xeb\xa7\x75\xd0\xed\x8f\xba\xd2\xf7\x1f\x4a\xd6\xf5\x93\x3c\x00\x00\x6c\xfb\xf4\x64\xeb\x5a\xfe\x5e\xc4\x62\x44\x5c\x49\xdf\xf5\x37\x5a\x5e\x5e\xae\xaa\xc5\xa5\xe5\x6a\xb9\x5a\x5a\xc8\xef\x67\xc7\x0b\x8b\xd5\x52\xe3\x73\x6d\x9e\xd6\xcb\x16\xc6\xfb\x78\x43\x3c\x1c\x57\xf5\x2f\x5b\x6c\x6c\xd7\x34\xed\xf3\xf2\xb4\xf6\xf6\xef\xab\x6f\x6b\x5c\x0d\xf6\xd1\xb1\xd9\xe8\x30\x70\x00\x88\x88\xed\x57\xa3\x07\x5e\x91\x8e\x99\xaa\x7a\x3e\xba\x7e\x97\xc3\xd1\xe0\xf1\x7f\xfc\x78\xfc\xb3\x1f\x5d\xdf\x4f\x01\x00\x00\x80\xc3\x57\x55\x55\xd5\x4b\x5f\xe7\x7d\x2a\x1d\xf3\xef\x77\xdd\x29\x00\x60\x26\xf2\xeb\x7f\xfb\xb8\x80\x5a\xad\x56\xab\xd5\xea\xe3\x57\x37\x55\x93\xdd\x6b\x16\x11\xb1\xd1\xdc\xa6\x7e\xcf\x60\x38\x7e\x00\x38\x62\x36\xe2\xb3\xae\xbb\x40\x87\xe4\x5f\xb4\x61\x44\xbc\xd4\x75\x27\x80\xb9\xd6\xeb\xba\x03\x1c\x8a\x07\x0f\xef\xae\xf5\x52\xbe\xbd\xe6\xeb\x41\x1a\xdf\x3d\x9f\x0b\xb2\x2b\xff\x8d\xde\xd6\x76\x79\xfb\x49\xd3\x69\xda\xe7\x98\xcc\xea\xfe\xb5\x19\x83\x78\x61\x8f\xfe\xbc\x38\xa3\x3e\xcc\x93\x9c\x7f\xbf\x9d\xff\xd5\xed\xf6\x71\x5a\xef\xb0\xf3\x9f\x95\xbd\xf2\xaf\xf7\x73\xa5\x83\xfe\x74\x2d\xe7\x3f\x68\xe7\xdf\x72\x7c\xf2\xef\x4f\xcc\xbf\x54\x39\xff\xe1\x53\xe5\x3f\x90\x3f\x00\x00\x00\x00\x00\xcc\xb1\xfc\xf7\xff\x15\xc7\x7f\xf3\x2e\x03\x00\x00\x00\x00\x00\x00\xc0\x91\xf3\xe0\xe1\xdd\xb5\x7c\xdd\x6b\x3e\xfe\xff\xb9\x09\xeb\xb9\xfe\xf3\x78\xca\xf9\xf7\xe4\x5f\xa4\x9c\x7f\xbf\x95\xff\x97\x5b\xeb\x0d\x1a\xf3\xf7\xdf\xdd\xc9\xff\x9f\x0f\xef\xae\xfd\xfe\xf6\x3f\xfe\x3f\x4f\xf7\x95\xff\xa8\x31\xdf\x4b\xf7\xac\x5e\xba\x47\xf4\xd2\x2d\xf5\x86\x69\x7a\x90\xbd\x7b\xdc\xe6\x68\x30\xae\x6f\x69\xd4\xeb\x0f\x86\xe9\x9c\x9f\x6a\xf4\x7e\x5c\x8f\x1b\xb1\x1e\xe7\x76\xad\xdb\x4f\xff\x1f\x3b\xed\xe7\x77\xb5\x0f\xd2\xae\xec\xb4\x5f\xd8\xd5\x3e\x7c\xac\xfd\xe2\xae\xf6\x51\xfa\xde\x81\x6a\x29\xb7\x9f\x89\xb5\xf8\x69\xdc\x88\xf7\xb6\xda\xeb\xb6\x85\x29\xfb\xbf\x38\xa5\xbd\x9a\xd2\x9e\xf3\x1f\x78\xfc\x17\x29\xe7\x3f\x6c\xfc\xd4\xf9\x2f\xa7\xf6\x5e\x6b\x5a\xbb\xff\x49\xff\xb1\xc7\x7d\x73\x3a\xe9\x76\xde\xb9\xfe\xf9\x5f\x9d\x3b\xfc\xdd\x99\x6a\x33\x06\x8f\xf6\xad\xa9\xde\xbf\xd3\x1d\xf4\x67\xeb\xff\xe4\xc4\x38\x7e\x7e\x6b\xfd\xe6\x99\x3b\xd7\x6e\xdf\xbe\x79\x3e\xd2\x64\xd7\xd2\x0b\x91\x26\xcf\x58\xce\x7f\x94\x7e\x1e\x3d\xff\xbf\xb2\xdd\x9e\x9f\xf7\x9b\x8f\xd7\xfb\x9f\x8c\x9f\x3a\xff\x79\xb1\x19\xc3\x3d\xf3\x7f\xa5\x31\x5f\xef\xef\x6b\x33\xee\x5b\x17\x72\xfe\xe3\xf4\x93\xf3\x7f\x2f\xb5\x4f\x7e\xfc\x1f\xe5\xfc\xf7\x7e\xfc\xbf\xde\x41\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x49\xaa\xaa\xda\xba\x44\xf4\x9d\x88\xb8\x94\xae\xff\xe9\xea\xda\x4c\x00\x60\xb6\xf2\xeb\x7f\x95\xe4\xe5\x6a\xb5\x5a\x5d\x74\xdd\x8f\xf9\xea\x8f\x5a\xfd\x8c\xea\xa6\x6a\xb2\xb7\x9b\x45\x44\xfc\xa5\xb9\x4d\xfd\x9e\xe1\x97\x93\x7e\x19\x00\x30\xcf\xfe\x13\x11\x7f\xef\xba\x13\x74\x46\xfe\x05\xcb\xdf\xf7\x57\x4f\x5f\xed\xba\x33\xc0\x4c\xdd\xfa\xe8\xe3\x1f\x5f\xbb\x71\x63\xfd\xe6\xad\xae\x7b\x02\x00\x00\x00\x00\x00\x00\x00\xfc\xaf\xf2\xf8\x9f\xab\x8d\xf1\x9f\x5f\x8d\x88\x95\xd6\x7a\xbb\xc6\x7f\x7d\x37\x56\x0f\x3a\xfe\xe7\x30\xcf\x3c\x1a\x60\xf4\x19\x0f\xf4\xbd\x87\xcd\xfe\x78\xd0\x6f\x0c\x37\xfe\x72\x3c\x79\xfc\xef\xd3\xf1\xe4\xf1\xbf\x87\x53\x6e\x6f\x34\xa5\x7d\x3c\xa5\x7d\x61\x4a\xfb\xe2\x94\xf6\x89\x17\x7a\x34\xe4\xfc\x5f\x6e\x8c\x77\x5e\xe7\x7f\xaa\x35\xfc\x7a\x09\xe3\xbf\xb6\xc7\xbc\x2f\x41\xce\xff\x74\xe3\xfe\x5c\xe7\xff\xa5\xd6\x7a\xcd\xfc\xab\xdf\x4e\xcd\x7f\x6e\xbf\x42\x64\x33\xfa\xbb\xf2\x3f\x7b\xfb\xc3\x9f\x9d\xbd\xf5\xd1\xc7\x6f\x5c\xff\xf0\xda\x07\xeb\x1f\xac\xff\xe4\xe2\xf9\xf3\xe7\x2e\x5e\xba\x74\xf9\xf2\xe5\xb3\xef\x5f\xbf\xb1\x7e\x6e\xfb\xdf\x0e\x7b\x7c\xb8\x72\xfe\x79\xec\x6b\xe7\x81\x96\x25\xe7\x9f\x33\x97\x7f\x59\x72\xfe\x5f\x48\xb5\xfc\xcb\x92\xf3\xff\x62\xaa\xe5\x5f\x96\x9c\x7f\x7e\xbf\x27\xff\xb2\xe4\xfc\xf3\x67\x1f\xf9\x97\x25\xe7\xff\x5a\xaa\xe5\x5f\x96\x9c\xff\x57\x52\x2d\xff\xb2\xe4\xfc\x5f\x4f\xb5\xfc\xcb\x92\xf3\xff\x6a\xaa\xe5\x5f\x96\x9c\xff\x1b\xa9\x96\x7f\x59\x72\xfe\x67\x52\x2d\xff\xb2\xe4\xfc\xcf\xa6\x5a\xfe\x65\xc9\xf9\xe7\x23\x5c\xf2\x2f\x4b\xce\x3f\x9f\xd9\x20\xff\xb2\xe4\xfc\x2f\xa4\x5a\xfe\x65\xc9\xf9\x5f\x4c\xb5\xfc\xcb\x92\xf3\x7f\x33\xd5\xf2\x2f\x4b\xce\xff\x6b\xa9\x96\x7f\x59\x72\xfe\x97\x52\x2d\xff\xb2\xe4\xfc\xbf\x9e\x6a\xf9\x97\x25\xe7\x7f\x39\xd5\xf2\x2f\x4b\xce\xff\x1b\xa9\x96\x7f\x59\x72\xfe\xdf\x4c\xb5\xfc\xcb\x92\xf3\x7f\x2b\xd5\xf2\x2f\x4b\xce\xff\x5b\xa9\x96\x7f\x59\x72\xfe\xdf\x4e\xb5\xfc\xcb\x92\xf3\xff\x4e\xaa\xe5\x5f\x96\x9c\xff\xdb\xa9\x96\x7f\x59\x76\xbe\xff\xdf\x8c\x19\x33\x66\xf2\x4c\xd7\xcf\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\xdb\x2c\x4e\x27\xee\x7a\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x2f\x3b\x70\x20\x00\x00\x00\x00\x00\xe4\xff\xda\x08\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\xd8\x81\x03\x01\x00\x00\x00\x00\x20\xff\xd7\x46\xa8\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xc2\xde\xdd\xc5\xc8\x55\xde\x67\x00\x3f\xb3\xde\xb5\xd7\x86\x80\x13\x08\x35\xd4\x90\xb5\x71\x8c\x31\x0b\xbb\xfe\xc0\x1f\x69\xdd\x38\x84\x10\x0a\x49\x53\xbe\xd2\xd0\x0f\x6c\xd7\xbb\x36\x9b\xf8\x0b\xaf\xdd\x00\x45\xb2\x23\x27\x0d\x52\x1c\x15\x55\xa9\xca\x4d\xdb\x24\x42\x2d\x37\x55\xac\x2a\x17\x69\x45\x23\x2e\xaa\x56\xbd\x2a\xed\x45\x7a\x53\xa5\xaa\x94\x0b\x54\x91\x88\x44\xaa\xd4\x56\x2d\x5b\xcd\x99\xf7\x7d\x77\x66\x76\x76\xce\x1a\x0f\xeb\x99\x73\x7e\x3f\x09\xff\xbd\x3b\x67\xe6\x9c\x39\xf3\xce\xec\x3e\x6b\x9e\x59\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\xd9\x86\x8f\x4f\x7f\xb5\x96\x65\x59\xfd\xbf\xfc\x8f\xb5\x59\x76\x6d\xfd\xef\xab\xc7\xd6\xe6\x9f\xfb\xc8\xd5\x3e\x42\x00\x00\x00\xe0\x4a\xfd\x5f\xfe\xe7\xdb\xd7\xa7\x4f\xec\x5f\xc2\x95\x9a\xb6\xf9\xfb\xdb\xfe\xf1\xbb\x73\x73\x73\x73\xd9\xe7\x56\xfc\xe1\xc8\x37\xe6\xe6\xd2\x05\x63\x59\x36\xb2\x2a\xcb\xf2\xcb\xa2\x4b\xff\xfe\x64\xad\x79\x9b\xe0\x42\x36\x5a\x1b\x6a\xfa\x78\xa8\x60\xf7\x2b\x0a\x2e\x1f\x2e\xb8\x7c\xa4\xe0\xf2\x95\x05\x97\xaf\x2a\xb8\x7c\xb4\xe0\xf2\x05\x27\x60\x81\xd5\x8d\x9f\xc7\xe4\x37\xb6\x29\xff\xeb\xda\xc6\x29\xcd\x6e\xcc\x46\xf2\xcb\x36\x75\xb8\xd6\x85\xda\xaa\xa1\xa1\xf8\xb3\x9c\x5c\x2d\xbf\xce\xdc\xc8\x91\x6c\x26\x3b\x96\x4d\x67\x93\x2d\xdb\x37\xb6\xad\xe5\xdb\xbf\xb6\xa1\xbe\xaf\x07\xb3\xb8\xaf\xa1\xa6\x7d\xad\xaf\xaf\x90\x9f\xbe\x70\x38\x1e\x43\x2d\x9c\xe3\x4d\x2d\xfb\x9a\xbf\xcd\xe8\xc7\x1f\xcb\xc6\x7e\xf6\xd3\x17\x0e\xff\xd9\x99\xb7\x6e\xee\x34\x0b\x4f\x43\xcb\xed\x35\x8e\x73\xcb\xc6\xfa\x71\x7e\x39\x7c\xa6\x71\xac\xb5\x6c\x55\x3a\x27\xf1\x38\x87\x9a\x8e\x73\x7d\x87\xc7\x64\x45\xcb\x71\xd6\xf2\xeb\xd5\xff\xde\x7e\x9c\x6f\x2f\xf1\x38\x57\xcc\x1f\xe6\xb2\x6a\x7f\xcc\x47\xb3\xa1\xfc\xef\x6f\xe4\xe7\x69\xb8\xf9\xc7\x7a\xe9\x3c\xad\x0f\x9f\xfb\xaf\xdb\xb3\x2c\x3b\x3f\x7f\xd8\xed\xdb\xe4\x9a\x16\xfb\x85\x6c\x28\x5b\xd3\xb2\xf7\xa1\xf9\xc7\x67\xb4\xb1\x22\xeb\xb7\x51\x5f\x4a\x1f\xc8\x86\x2f\x6b\x9d\x6e\x58\xc2\x3a\xad\xcf\xa9\x4d\xad\xeb\xb4\xfd\x39\x11\x1f\xff\x0d\xe1\x7a\xc3\x8b\x1c\x43\xf3\xc3\xf4\xe3\x2f\xad\x5c\xf0\xb8\x5f\xee\x3a\x8d\xea\xf7\x7a\xb1\xe7\x4a\xfb\x1a\xec\xf5\x73\xa5\x5f\xd6\x60\x5c\x17\x6f\xe4\x77\xfa\xc5\x8e\x6b\x70\x53\xb8\xff\x2f\x6c\x5e\x7c\x0d\x76\x5c\x3b\x1d\xd6\x60\xba\xdf\x4d\x6b\x70\x63\xd1\x1a\x1c\x5a\xb9\x22\x3f\xe6\xf4\x20\xd4\xf2\xeb\xcc\xaf\xc1\x6d\x2d\xdb\xaf\xc8\xf7\x54\xcb\xe7\x9b\x9b\xbb\xaf\xc1\x89\x33\xc7\x4f\x4d\xcc\x3e\xf7\xfc\xdd\x33\xc7\x0f\x1d\x9d\x3e\x3a\x7d\x62\xc7\xb6\x6d\x93\x3b\x76\xed\xda\xb3\x67\xcf\xc4\x91\x99\x63\xd3\x93\x8d\x3f\xdf\xe5\xd9\xee\x7f\x6b\xb2\xa1\xf4\x1c\xd8\x18\xce\x5d\x7c\x0e\xdc\xd1\xb6\x6d\xf3\x52\x9d\xfb\x56\xef\x9e\x87\xa3\x5d\x9e\x87\x6b\xdb\xb6\xed\xf5\xf3\x70\xb8\xfd\xce\xd5\x96\xe7\x09\xb9\x70\x4d\x37\x9e\x1b\x8f\xd7\x4f\xfa\xe8\xc5\xa1\x6c\x91\xe7\x58\xfe\xf8\x6c\xbd\xf2\xe7\x61\xba\xdf\x4d\xcf\xc3\xe1\xa6\xe7\xe1\xfa\x25\x1d\x73\x2d\xbf\x4e\xd1\xf3\xb0\xbe\xcd\xa9\xad\x4b\xfb\x9e\x65\xb8\xe9\xbf\x4e\xc7\xf0\x5e\x7d\x2d\x58\xdb\xb4\x06\xdb\xbf\x1f\x69\x5f\x83\xbd\xfe\x7e\xa4\x5f\xd6\xe0\x68\x58\x17\xff\xba\x75\xf1\xaf\x05\xeb\xc3\xf1\xbe\x38\xbe\x84\xef\x47\x9a\xf7\x95\xad\x58\xb0\x06\xd3\xdd\x0d\xaf\x3d\xf5\xcf\xa4\xef\xf7\x47\xf7\xe4\xa3\xd3\xba\xbc\xa5\x7e\xc1\x35\x2b\xb3\xb3\xb3\xd3\xa7\xef\x79\xf6\xd0\x99\x33\xa7\xb7\x65\x61\x2c\x8b\x1b\x9a\xd6\x4a\xfb\x7a\x5d\xd3\x74\x9f\xb2\x05\xeb\x75\xe8\xb2\xd7\xeb\xfe\x99\xdb\x5e\xbc\xa5\xc3\xe7\xd7\x86\x73\x35\x7a\x77\xfd\x8f\xd1\x45\x1f\xab\xfa\x36\x3b\xef\xe9\xfe\x58\xe5\x5f\xdd\xd2\xf9\x8c\xdf\x44\xe6\xe7\xb3\xe5\x2c\x6f\xcf\xc2\xe8\xb1\xe5\x3e\x9f\x9d\xbe\x9a\xd7\xcf\x67\xca\x92\x5d\xce\x67\x7d\x9b\x2f\x4f\x5c\xee\xda\x5f\xf8\xfa\x9b\xbe\x55\x6f\x7a\xfd\x1d\x59\xe4\xf5\x37\xe6\xfe\x77\x1a\xfb\x4b\x37\x75\x61\xc5\xc8\x70\xe3\xf9\xbb\x22\x9d\x9d\x91\x96\xd7\xe3\xd6\x87\x6a\x38\x7f\xed\xaa\xe5\xfb\x7e\x7b\x62\x69\xaf\xc7\x23\xe1\xbf\xe5\x7e\x3d\xbe\xb1\xcb\xeb\xf1\xba\xb6\x6d\x7b\xfd\x7a\x3c\xd2\x7e\xe7\xe2\xeb\x71\xad\xe8\xa7\x1d\x57\xa6\xfd\xf1\x1c\x0d\xeb\xe4\xd8\x64\xf7\xd7\xe3\xfa\x36\xeb\xb6\x5f\xee\x9a\x1c\xee\xfa\x7a\x7c\x7b\x98\xb5\x70\xfe\xef\x0c\x49\x21\xe5\xa2\xa6\xb5\xb3\xd8\xba\x4d\xfb\x1a\x1e\x1e\x09\xf7\x6b\x38\xee\xa1\x75\x9d\xee\x68\xd9\x7e\x24\x64\xb3\xfa\xbe\x5e\xdd\xfe\xee\xd6\xe9\x96\xdb\x1b\xb7\xb5\x22\xdd\xbb\x79\xcb\xb5\x4e\xc7\xda\xb6\xed\xf5\x3a\x4d\xaf\x57\x8b\xad\xd3\x5a\xd1\x4f\xdf\xde\x9d\xf6\xc7\x73\x34\xac\x8b\x1b\x77\x74\x5f\xa7\xf5\x6d\x5e\xdf\x79\xe5\xaf\x9d\xab\xe3\x5f\x9b\x5e\x3b\x57\x16\xad\xc1\x91\x15\x2b\xeb\xc7\x3c\x92\x16\x61\xe3\xf5\x7e\x6e\x75\x5c\x83\xf7\x64\x87\xb3\x93\xd9\xb1\x6c\x2a\xbf\x74\x65\xbe\x9e\x6a\xf9\xbe\xc6\xef\x5d\xda\x1a\x5c\x19\xfe\x5b\xee\xd7\xca\x75\x5d\xd6\xe0\x96\xb6\x6d\x7b\xbd\x06\xd3\xd7\xb1\xc5\xd6\x5e\x6d\x78\xe1\x9d\xef\x81\xf6\xc7\x73\x34\xac\x8b\x97\xef\xed\xbe\x06\xeb\xdb\xdc\xbf\xbb\xb7\xdf\xbb\x6e\x09\x9f\x49\xdb\x34\x7d\xef\xda\xfe\xf3\xb5\xc5\x7e\xe6\x75\x4b\xdb\x69\x7a\x2f\x7f\xe6\x55\x3f\xce\xbf\xdd\xdd\xfd\x67\xb3\xf5\x6d\x8e\xed\xb9\xdc\x9c\xd9\xfd\x3c\xdd\x15\x3e\x73\x4d\x87\xf3\xd4\xfe\xfc\x5d\xec\x39\x35\x95\x2d\xcf\x79\x5a\x17\x8e\xf3\xad\x3d\x8b\x9f\xa7\xfa\xf1\xd4\xb7\xf9\xc6\xde\x25\xae\xa7\xfd\x59\x96\x9d\x7b\xe6\xbe\xfc\xe7\xbd\xe1\xdf\x57\xfe\xf2\xec\x0f\xbe\xdb\xf2\xef\x2e\x9d\xfe\x4d\xe7\xdc\x33\xf7\xfd\xe4\x7d\x47\xfe\xee\x72\x8e\x1f\x80\xc1\xf7\x4e\x63\xac\x69\x7c\xad\x6b\xfa\x97\xa9\xa5\xfc\xfb\x3f\x00\x00\x00\x30\x10\x62\xee\x1f\x0a\x33\x91\xff\x01\x00\x00\xa0\x34\x62\xee\x8f\xff\x57\x78\x22\xff\x03\x00\x00\x40\x69\xc4\xdc\x3f\x1c\x66\x52\x91\xfc\xbf\xee\xfe\xb7\x66\xde\x39\x97\xa5\x66\xfe\x5c\x10\x2f\x4f\xa7\xe1\xa1\xc6\x76\xb1\xe3\x3a\x19\x3e\x1e\x9b\x9b\x57\xff\xfc\x7d\xaf\x4c\xff\xe7\x5f\x9f\x5b\xda\xbe\x87\xb2\x2c\xfb\xdf\x87\x7e\xb7\xe3\xf6\xeb\x1e\x8a\xc7\xd5\x30\x16\x8e\xf3\xd2\x27\x5a\x3f\xbf\xf0\x8a\xe7\x96\xb4\xff\x83\x4f\xcc\x6f\xd7\xdc\x5f\xff\x66\xb8\xfd\x78\x7f\x96\xba\x0c\x3a\x55\x70\x27\xb3\x2c\x7b\xed\xfa\xaf\xe7\xfb\x19\x7b\xf2\x62\x3e\x5f\x7f\xe8\x60\x3e\x1f\x3d\xff\xe2\x85\xfa\x36\x6f\xef\x6d\x7c\x1c\xaf\xff\xe6\x0d\x8d\xed\xff\x38\x94\x7f\xf7\x1f\x39\xd4\x72\xfd\x37\xc3\x79\xf8\x51\x98\x93\x0f\x77\x3e\x1f\xf1\x7a\xdf\xb9\x78\xe7\xfa\xdd\x9f\x9d\xdf\x5f\xbc\x5e\x6d\xe3\x75\xf9\xdd\x7e\xf9\xa9\xc6\xed\xc6\xf7\xc9\x79\xe9\x42\x63\xfb\x78\x9e\x3b\x1c\x7f\x5c\x02\xdf\xa9\xff\xf1\xec\x87\x3b\x1f\xff\xb9\xa1\xce\xc7\xff\x6a\xb8\xdd\x57\xc2\xfc\xef\x5b\x1b\xdb\x37\x3f\x06\xf5\x8f\xe3\xf5\xbe\x12\x8e\xff\x6f\xbe\xf6\x6a\xbe\xbf\x78\xbd\x7b\xbe\xfd\xfd\x8e\xc7\x7f\xe9\xab\x8d\xed\x4f\x3d\xd0\xd8\xee\x60\x98\x71\xff\x5b\xc2\xc7\x9b\x1e\x78\x6b\xa6\xf9\x7c\x3d\x5b\x6b\xec\x2f\xee\x27\xfb\x64\x63\xbb\xb8\xff\xc9\x1f\xfc\x7e\x7e\x79\xbc\xbd\x78\xfb\xed\xc7\x3f\x7a\xe0\x62\xcb\xf9\x68\x5f\x1f\xaf\xff\x73\xe3\x76\x26\xda\xb6\x8f\x9f\x8f\xfb\x89\xfe\xaa\x6d\xff\xb5\x6c\x6c\x75\xf3\xfa\x8c\xfb\x7f\xf5\xf7\x0e\xb6\x9c\xe7\xa2\xfd\x5f\x7a\xf4\xcd\x5b\xeb\xb7\xdb\xbe\xff\xbb\xda\xb6\x3b\xf5\xcc\xd6\x7c\xff\xf3\xb7\xd7\xfa\x8e\x4d\x7f\xf2\x95\xaf\x77\xdc\x5f\x3c\x9e\xfd\x7f\x71\xaa\xe5\xfe\xec\x7f\x24\x3c\x8f\xc3\xfe\x5f\x7e\x2a\xac\xc7\x70\xf9\xff\x5c\x6a\xdc\x5e\xfb\xbb\x2b\x1c\x7c\xa4\xf5\xf5\x27\x6e\xff\xcd\xb5\xe7\x5a\xee\x4f\xf4\xe0\xcf\x1a\xfb\xbf\xf4\xd1\xa3\xf9\x5c\x35\xba\x7a\xcd\x35\xd7\xbe\xef\xba\xf3\x1f\xaa\x9f\xbb\x2c\x7b\xe3\xb1\xc6\xed\x15\xed\xff\xe8\x9f\x9e\x6c\x39\xfe\x6f\xdd\xd4\x38\x1f\xf1\xf2\xf0\x34\xbd\x26\x6b\xdb\xff\x62\xe2\xfe\x4f\x7f\x71\xfc\xc4\xc9\xd9\xb3\x33\x53\x4d\x67\x35\x7f\xef\x9c\x4f\x35\x8e\x27\x1e\xef\xf5\xe1\xb5\xb5\xfd\xe3\x03\x27\xcf\x3c\x3d\x7d\x7a\x6c\x72\x6c\x32\xcb\xc6\xca\xfb\x16\x7a\xef\xda\xb7\xc3\xfc\x49\x63\x9c\xbf\xdc\xeb\x6f\x7d\x22\x3c\x9e\xb7\xfc\xd1\x6b\x6b\x36\xff\xd3\xd7\xe2\xe7\xff\xe5\xf1\xc6\xe7\x2f\x3e\xdc\xf8\xba\x75\x47\xd8\xee\xa5\xf0\xf9\xb5\xe1\xf1\xbb\xd2\xfd\xbf\xbc\xe1\xa6\xfc\xf9\x5d\x7b\xbd\xf1\x71\x4b\x8f\xbd\x07\xd6\x6f\xfa\x8f\x3d\x4b\xda\x30\xdc\xff\xf6\xef\x0b\xe2\xf3\xed\xd4\x07\x9f\xce\xcf\x43\xfd\xb2\xfc\xeb\x46\x7c\x5e\x5f\xe1\xf1\xff\x70\xaa\x71\x3b\xdf\x0b\xe7\x75\x2e\xbc\x33\xf3\xc6\x9b\xe6\xf7\xd7\xbc\x7d\x7c\x6f\x84\x8b\x8f\x35\x9e\xef\x57\x7c\xfe\xc2\xcb\x5c\x7c\x5c\xff\x3c\x3c\xde\x9f\xfe\x51\xe3\xf6\xe3\x71\xc5\xfb\xfb\xc3\xf0\x7d\xcc\xf7\xd7\xb5\xbe\xde\xc5\xf5\xf1\xbd\x73\x43\xed\xb7\x9f\xbf\x8b\xc7\xf9\xf0\x7a\x92\x9d\x6f\x5c\x1e\xb7\x8a\xe7\xfb\xe2\xdb\x37\x75\x3c\xbc\xf8\x3e\x24\xd9\xf9\x9b\xf3\x8f\xff\x20\xdd\xce\xcd\x97\x75\x37\x17\x33\xfb\xdc\xec\xc4\xb1\x99\x13\x67\x9f\x9d\x38\x33\x3d\x7b\x66\x62\xf6\xb9\xe7\x0f\x1c\x3f\x79\xf6\xc4\x99\x03\xf9\x7b\x79\x1e\xf8\x7c\xd1\xf5\xe7\x5f\x9f\xd6\xe4\xaf\x4f\x53\xd3\xbb\x76\x66\xf9\xab\xd5\xc9\xc6\x78\x8f\x5d\xed\xe3\x3f\xf5\xc4\xe1\xa9\xdd\x93\x9b\xa7\xa6\x8f\x1c\x3a\x7b\xe4\xcc\x13\xa7\xa6\x4f\x1f\x3d\x3c\x3b\x7b\x78\x7a\x6a\x76\xf3\xa1\x23\x47\xa6\xbf\x58\x74\xfd\x99\xa9\x7d\xdb\xb6\xef\xdd\xb1\x7b\xfb\xf8\xd1\x99\xa9\x7d\x7b\xf6\xee\xdd\xb1\x77\x7c\xe6\xc4\xc9\xfa\x61\x34\x0e\xaa\xc0\xae\xc9\x2f\x8c\x9f\x38\x7d\x20\xbf\xca\xec\xbe\x9d\x7b\xb7\xdd\x7b\xef\xce\xc9\xf1\xe3\x27\xa7\xa6\xf7\xed\x9e\x9c\x1c\x3f\x5b\x74\xfd\xfc\x6b\xd3\x78\xfd\xda\xbf\x33\x7e\x7a\xfa\xd8\xa1\x33\x33\xc7\xa7\xc7\x67\x67\x9e\x9f\xde\xb7\x6d\xef\xae\x5d\xdb\x0b\xdf\x0d\xf0\xf8\xa9\x23\xb3\x63\x13\xa7\xcf\x9e\x98\x38\x3b\x3b\x7d\x7a\xa2\x71\x5f\xc6\xce\xe4\x9f\xae\x7f\xed\x2b\xba\x3e\xe5\x34\xfb\x6f\x8d\xef\x67\xdb\xd5\x1a\x6f\xc4\x97\x7d\xe6\xae\x5d\xe9\xfd\x59\xeb\x5e\xf9\xd2\xa2\x37\xd5\xd8\xa4\xed\x0d\x44\xdf\x0a\xef\x45\xf3\x0f\xef\x3f\xb5\x67\x29\x1f\xc7\xdc\x3f\x12\x66\x52\x91\xfc\x0f\x00\x00\x00\x55\x10\x73\xff\xca\x30\x13\xf9\x1f\x00\x00\x00\x4a\x23\xe6\xfe\x55\x61\x26\xf2\x3f\x00\x00\x00\x94\x46\xcc\xfd\xa3\x61\x26\x15\xc9\xff\xfa\xff\xfa\xff\x97\xd9\xff\x6f\xe9\xc9\xeb\xff\x2f\x77\xff\x3f\xcb\xf4\xff\xfb\xae\xff\xbf\x60\xff\x8b\xd1\xff\x5f\x1e\xfa\xff\xdd\xe9\xff\x17\xd0\xff\xef\x41\x7f\x7e\x58\xff\x5f\xff\x5f\xff\x9f\xa4\xdf\xfa\xff\x31\xf7\xaf\xce\xb2\x4a\xe6\x7f\x00\x00\x00\xa8\x82\x98\xfb\xd7\x84\x99\xc8\xff\x00\x00\x00\x50\x1a\x31\xf7\x5f\x13\x66\x22\xff\x03\x00\x00\x40\x69\xc4\xdc\x7f\x6d\x98\x49\x45\xf2\xbf\xfe\xbf\xfe\xbf\xfe\xbf\xfe\xff\x7b\xdb\xff\xbf\x6e\x7e\x5d\xea\xff\xeb\xff\x2f\x03\xfd\xff\xee\xf4\xff\x0b\xe8\xff\xfb\xfd\xff\xfa\xff\xfa\xff\xf4\x54\xbf\xf5\xff\x63\xee\x7f\x5f\x98\x49\x45\xf2\x3f\x00\x00\x00\x54\x41\xcc\xfd\xd7\x85\x99\xc8\xff\x00\x00\x00\x50\x1a\x31\xf7\x5f\x1f\x66\x22\xff\x03\x00\x00\x40\x69\xc4\xdc\xbf\x36\xcc\xa4\x22\xf9\x5f\xff\x5f\xff\x5f\xff\x5f\xff\xdf\xef\xff\xef\xbc\x7f\xfd\xff\xc1\xa4\xff\xdf\x9d\xfe\x7f\x01\xfd\x7f\xfd\x7f\xfd\x7f\xfd\x7f\x7a\xaa\xdf\xfa\xff\x31\xf7\xbf\x3f\xcc\xa4\x22\xf9\x1f\x00\x00\x00\xaa\x20\xe6\xfe\x0f\x84\x99\xc8\xff\x00\x00\x00\x50\x1a\x31\xf7\xdf\x10\x66\xb2\xf4\xfc\xff\x52\xef\x8f\x0a\x00\x00\x00\xe8\xa5\x98\xfb\x6f\x0c\x33\xa9\xc8\xbf\xff\xeb\xff\x97\xa9\xff\xbf\x3a\xed\x5b\xff\x5f\xff\xbf\xdb\xfe\xf5\xff\xf5\xff\xcb\x4c\xff\xbf\x3b\xfd\xff\x02\xfa\xff\xfa\xff\xfa\xff\xfa\xff\xf4\x54\xbf\xf5\xff\x63\xee\xff\x60\x98\x49\x45\xf2\x3f\x00\x00\x00\x54\x41\xcc\xfd\x37\x85\x99\xc8\xff\x00\x00\x00\x50\x1a\x31\xf7\xff\x5c\x98\x89\xfc\x0f\x00\x00\x00\xa5\x11\x73\xff\xba\x30\x93\x8a\xe4\x7f\xfd\xff\x32\xf5\xff\xe7\xe9\xff\xeb\xff\x77\xdb\xbf\xfe\xbf\xfe\x7f\x99\xe9\xff\x77\xa7\xff\x5f\x40\xff\x5f\xff\x5f\xff\x5f\xff\x9f\x9e\xea\xb7\xfe\x7f\xcc\xfd\x37\x87\x99\x54\x24\xff\x03\x00\x00\x40\x15\xc4\xdc\x7f\x4b\x98\x89\xfc\x0f\x00\x00\x00\xa5\x11\x73\xff\xcf\x87\x99\xc8\xff\x00\x00\x00\x50\x1a\x31\xf7\xaf\x0f\x33\xa9\x48\xfe\xd7\xff\xd7\xff\xd7\xff\xd7\xff\xd7\xff\xef\xbc\x7f\xfd\xff\xc1\xa4\xff\xdf\x9d\xfe\x7f\x01\xfd\x7f\xfd\x7f\xfd\x7f\xfd\x7f\x7a\xaa\xdf\xfa\xff\x31\xf7\xdf\x1a\x66\x52\x91\xfc\x0f\x00\x00\x00\x55\x10\x73\xff\x6d\x61\x26\xf2\x3f\x00\x00\x00\x94\x46\xcc\xfd\x1f\x0a\x33\x91\xff\x01\x00\x00\xa0\x34\x62\xee\x1f\x0b\x33\xa9\x48\xfe\xd7\xff\xd7\xff\xd7\xff\xd7\xff\xd7\xff\xef\xbc\x7f\xfd\xff\xc1\x74\xb5\xfb\xff\xb5\x2b\xdc\xbf\xfe\xbf\xfe\xbf\xfe\xff\xe0\x1e\xbf\xfe\xbf\xfe\x3f\x0b\xf5\x5b\xff\x3f\xe6\xfe\x0d\x61\x26\x15\xc9\xff\x00\x00\x00\x50\x05\x31\xf7\x6f\x0c\x33\x91\xff\x01\x00\x00\xa0\x34\x62\xee\xbf\x3d\xcc\x44\xfe\x07\x00\x00\x80\xd2\x88\xb9\x7f\x53\x98\xc1\xca\xab\x77\x44\xcb\x4b\xff\x5f\xff\x5f\xff\x5f\xff\x5f\xff\xbf\xf3\xfe\xf5\xff\x07\xd3\xd5\xee\xff\xfb\xfd\xff\xfa\xff\x99\xfe\xbf\xfe\xbf\xfe\xbf\xfe\x3f\x49\xbf\xf5\xff\x63\xee\xff\x70\x98\x89\x7f\xff\x07\x00\x00\x80\xd2\x88\xb9\x7f\x73\x98\x89\xfc\x0f\x00\x00\x00\xa5\x11\x73\xff\x1d\x61\x26\xf2\x3f\x00\x00\x00\x94\x46\xcc\xfd\x5b\xc2\x4c\x2a\x92\xff\xf5\xff\xf5\xff\xf5\xff\xf5\xff\xf5\xff\x3b\xef\x5f\xff\x7f\x30\xe9\xff\x77\xa7\xff\x5f\x40\xff\x5f\xff\x5f\xff\x5f\xff\x9f\x9e\xea\xb7\xfe\x7f\xcc\xfd\x77\x86\x99\x54\x24\xff\x03\x00\x00\x40\x15\xc4\xdc\xbf\x35\xcc\x44\xfe\x07\x00\x00\x80\xd2\x88\xb9\xff\xae\x30\x13\xf9\x1f\x00\x00\x00\x4a\x23\xe6\xfe\xf1\x30\x93\x8a\xe4\x7f\xfd\x7f\xfd\x7f\xfd\x7f\xfd\x7f\xfd\xff\xce\xfb\xd7\xff\x1f\x4c\xfa\xff\xdd\xe9\xff\x17\xd0\xff\xd7\xff\xd7\xff\xd7\xff\xa7\xa7\xfa\xad\xff\x1f\x73\xff\xdd\x61\x26\x15\xc9\xff\x00\x00\x00\x50\x05\x31\xf7\xdf\x13\x66\xd2\x9e\xff\x57\x2f\xe7\x51\x01\x00\x00\x00\xbd\x14\x73\xff\x44\x98\x89\x7f\xff\x07\x00\x00\x80\xd2\x88\xb9\x7f\x32\xcc\xa4\x22\xf9\x5f\xff\x5f\xff\x5f\xff\x5f\xff\x5f\xff\xbf\xf3\xfe\xf5\xff\x07\x93\xfe\x7f\x77\xfa\xff\x05\xf4\xff\xf5\xff\xf5\xff\xf5\xff\xe9\xa9\x7e\xeb\xff\xc7\xdc\xbf\x2d\xcc\xa4\x22\xf9\x1f\x00\x00\x00\xaa\x20\xe6\xfe\xed\x61\x26\xf2\x3f\x00\x00\x00\x94\x46\xcc\xfd\x3b\xc2\x4c\xe4\x7f\x00\x00\x00\x28\x8d\x98\xfb\x77\x86\x99\x54\x24\xff\xeb\xff\xeb\xff\xeb\xff\xeb\xff\xeb\xff\x77\xde\xbf\xfe\xff\x60\xd2\xff\xef\x4e\xff\xbf\x80\xfe\xbf\xfe\xff\x80\xf7\xff\xeb\x4f\x19\xfd\x7f\xfa\x49\xbf\xf5\xff\x63\xee\xbf\x37\xcc\xa4\x22\xf9\x1f\x00\x00\x00\xaa\x20\xe6\xfe\x5d\x61\x26\xf2\x3f\x00\x00\x00\x94\x46\xcc\xfd\xbb\xc3\x4c\xe4\x7f\x00\x00\x00\x28\x8d\x98\xfb\xf7\x84\x99\x54\x24\xff\xeb\xff\xeb\xff\xeb\xff\xeb\xff\xeb\xff\x77\xde\x7f\x2f\xfa\xff\xab\x9a\xfe\xae\xff\xbf\x3c\xf4\xff\xbb\xd3\xff\x2f\xa0\xff\xaf\xff\x3f\xe0\xfd\xff\xab\xf9\xfb\xff\x5f\x09\x53\xff\x9f\x66\xfd\xd6\xff\x8f\xb9\x7f\x6f\x98\x49\x45\xf2\x3f\x00\x00\x00\x54\x41\xcc\xfd\x1f\x09\x33\x91\xff\x01\x00\x00\xa0\x34\x62\xee\xff\x85\x30\x13\xf9\x1f\x00\x00\x00\x4a\x23\xe6\xfe\x5f\x0c\x33\xa9\x48\xfe\xd7\xff\xef\xda\xff\xbf\x5b\xff\x5f\xff\x5f\xff\x5f\xff\x3f\xf2\xfb\xff\x07\x83\xfe\x7f\x77\xfa\xff\x05\xf4\xff\xf5\xff\xf5\xff\xfd\xfe\x7f\x7a\xaa\xdf\xfa\xff\x31\xf7\xef\x0b\x33\xa9\x48\xfe\x07\x00\x00\x80\x2a\x88\xb9\xff\x97\xc2\x4c\xe4\x7f\x00\x00\x00\x28\x8d\x98\xfb\x3f\x1a\x66\x22\xff\x03\x00\x00\x40\x69\xc4\xdc\xbf\x3f\xcc\x64\x50\xf3\x7f\xa7\x22\x7a\x17\xfa\xff\x7e\xff\xbf\xfe\xbf\xfe\xbf\xfe\x7f\xe7\xfd\xeb\xff\x0f\x26\xfd\xff\xee\xf4\xff\x0b\xe8\xff\xeb\xff\xeb\xff\xeb\xff\xd3\x53\xfd\xd6\xff\x8f\xb9\xff\x63\x61\x26\x83\x9a\xff\x01\x00\x00\x80\x05\x62\xee\xbf\x2f\xcc\x44\xfe\x07\x00\x00\x80\xd2\x88\xb9\xff\xe3\x61\x26\xf2\x3f\x00\x00\x00\x94\x46\xcc\xfd\xf7\x87\x99\x54\x24\xff\xeb\xff\xeb\xff\xeb\xff\xeb\xff\xeb\xff\x77\xde\xbf\xfe\xff\x60\xd2\xff\xef\x4e\xff\xbf\x80\xfe\xbf\xfe\xbf\xfe\xbf\xfe\x3f\x3d\xd5\x6f\xfd\xff\x98\xfb\x3f\x11\x66\x52\x91\xfc\x0f\x00\x00\x00\x55\x10\x73\xff\x03\x61\x26\xf2\x3f\x00\x00\x00\x94\x46\xcc\xfd\x9f\x0c\x33\x91\xff\x01\x00\x00\xa0\x34\x62\xee\x7f\x30\xcc\xa4\x22\xf9\x5f\xff\x5f\xff\xbf\x62\xfd\xff\x11\xfd\x7f\xfd\x7f\xfd\xff\x72\xab\x44\xff\xbf\xfd\x49\x72\x19\xf4\xff\x0b\xe8\xff\xeb\xff\xeb\xff\xeb\xff\xd3\x53\xfd\xd6\xff\x8f\xb9\xff\x97\xc3\x4c\x2a\x92\xff\x01\x00\x00\xa0\x0a\x62\xee\x7f\x28\xcc\x44\xfe\x07\x00\x00\x80\xd2\x88\xb9\xff\xe1\x30\x13\xf9\x1f\x00\x00\x00\x4a\x23\xe6\xfe\x4f\x85\x99\x54\x24\xff\xeb\xff\xeb\xff\x57\xac\xff\xef\xf7\xff\xeb\xff\xeb\xff\x97\x5c\x25\xfa\xff\x57\x40\xff\xbf\x80\xfe\xbf\xfe\xbf\xfe\xbf\xfe\x3f\x3d\xd5\x6f\xfd\xff\x98\xfb\x3f\x1d\x66\x52\x91\xfc\x0f\x00\x00\x00\x55\x10\x73\xff\xaf\x84\x99\xc8\xff\x00\x00\x00\x50\x1a\x31\xf7\x7f\x26\xcc\x44\xfe\x07\x00\x00\x80\xd2\x88\xb9\xff\x57\xc3\x4c\x2a\x92\xff\xf5\xff\xf5\xff\xf5\xff\xf5\xff\xf5\xff\x3b\xef\x5f\xff\x7f\x30\xe9\xff\x77\xa7\xff\x5f\x40\xff\x5f\xff\x5f\xff\x5f\xff\x9f\x9e\xea\xb7\xfe\x7f\xcc\xfd\x8f\x84\x99\x54\x24\xff\x03\x00\x00\x40\x15\xc4\xdc\xff\x68\x98\x89\xfc\x0f\x00\x00\x00\xa5\x11\x73\xff\x63\x61\x26\xf2\x3f\x00\x00\x00\x94\x46\xcc\xfd\x8f\x87\x99\x54\x24\xff\xeb\xff\xeb\xff\xeb\xff\xeb\xff\xeb\xff\x77\xde\xbf\xfe\xff\x60\xd2\xff\xef\x4e\xff\xbf\x80\xfe\xbf\xfe\xbf\xfe\xbf\xfe\x3f\x3d\xd5\x6f\xfd\xff\x98\xfb\x9f\x08\x33\xa9\x48\xfe\x07\x00\x00\x80\x2a\x88\xb9\xff\xb3\x61\x26\xf2\x3f\x00\x00\x00\x94\x46\xcc\xfd\xbf\x16\x66\x22\xff\x03\x00\x00\x40\x69\xc4\xdc\xff\xb9\x30\x93\x8a\xe4\x7f\xfd\x7f\xfd\x7f\xfd\x7f\xfd\x7f\xfd\xff\xce\xfb\xd7\xff\x1f\x4c\xfa\xff\xdd\xe9\xff\x17\xd0\xff\xd7\xff\xd7\xff\xd7\xff\xa7\xa7\xfa\xad\xff\x1f\x73\xff\x93\x61\x26\x15\xc9\xff\x00\x00\x00\x50\x05\x31\xf7\xff\x7a\x98\x89\xfc\x0f\x00\x00\x00\xa5\x11\x73\xff\x6f\x84\x99\xc8\xff\x00\x00\x00\x50\x1a\x31\xf7\xff\x66\x98\x49\x45\xf2\xbf\xfe\xbf\xfe\xbf\xfe\xbf\xfe\xbf\xfe\x7f\xe7\xfd\xeb\xff\x0f\x26\xfd\xff\xee\xf4\xff\x0b\xe8\xff\xeb\xff\xeb\xff\xeb\xff\xd3\x53\xfd\xd6\xff\x8f\xb9\xff\xb7\xc2\x4c\x2a\x92\xff\x01\x00\x00\xa0\x0a\x62\xee\x7f\x2a\xcc\x44\xfe\x07\x00\x00\x80\xd2\x88\xb9\xff\x40\x98\x89\xfc\x0f\x00\x00\x00\xa5\x11\x73\xff\xc1\x30\x93\x8a\xe4\x7f\xfd\x7f\xfd\x7f\xfd\x7f\xfd\x7f\xfd\xff\xce\xfb\xd7\xff\x1f\x4c\xfa\xff\xdd\xe9\xff\x17\xd0\xff\xd7\xff\xd7\xff\xd7\xff\xa7\xa7\xfa\xad\xff\x1f\x73\xff\xa1\x30\x93\x8a\xe4\x7f\x00\x00\x00\xa8\x82\x98\xfb\x7f\x3b\xcc\x44\xfe\x07\x00\x00\x80\xd2\x88\xb9\xff\x70\x98\x89\xfc\x0f\x00\x00\x00\xa5\x11\x73\xff\x54\x98\x49\x45\xf2\xbf\xfe\xbf\xfe\xbf\xfe\x7f\x5f\xf4\xff\x57\xea\xff\xeb\xff\xeb\xff\xf7\x86\xfe\x7f\x77\xfa\xff\x05\xf4\xff\xf5\xff\xf5\xff\xf5\xff\xe9\xa9\x7e\xeb\xff\xc7\xdc\x3f\x1d\x66\x52\x91\xfc\x0f\x00\x00\x00\x55\x10\x73\xff\x91\x30\x13\xf9\x1f\x00\x00\x00\x4a\x23\xe6\xfe\xa3\x61\x26\xf2\x3f\x00\x00\x00\x94\x46\xcc\xfd\x4f\x87\x99\x54\x24\xff\xeb\xff\xeb\xff\xeb\xff\xf7\x45\xff\xdf\xef\xff\xd7\xff\xd7\xff\xef\x11\xfd\xff\xee\xf4\xff\x0b\xe8\xff\xeb\xff\xbf\xab\xe3\x6f\x3c\x82\xfa\xff\xfa\xff\x2c\xd4\x6f\xfd\xff\x98\xfb\x67\xc2\x4c\x2a\x92\xff\x01\x00\x00\xa0\x0a\x62\xee\xff\x7c\x98\x89\xfc\x0f\x00\x00\x00\xa5\x11\x73\xff\x17\xc2\x4c\xe4\x7f\x00\x00\x00\x28\x8d\x98\xfb\x8f\x85\x99\x54\x24\xff\xeb\xff\xeb\xff\xeb\xff\x97\xbb\xff\x7f\xad\xfe\xbf\xfe\x7f\xc5\xe8\xff\x77\xa7\xff\x5f\x40\xff\x5f\xff\xdf\xef\xff\xd7\xff\xa7\xa7\xfa\xad\xff\x1f\x73\xff\xf1\x30\x93\x8a\xe4\x7f\x00\x00\x00\xa8\x82\x98\xfb\x4f\x84\x99\xc8\xff\x00\x00\x00\x50\x1a\x31\xf7\x9f\x0c\x33\x91\xff\x01\x00\x00\xa0\x34\x62\xee\x3f\x15\x66\x52\x91\xfc\xaf\xff\xaf\xff\xaf\xff\x5f\xee\xfe\x7f\xa7\xfd\xeb\xff\xeb\xff\x97\x99\xfe\x7f\x77\xfa\xff\x05\xf4\xff\xf5\xff\xf5\xff\xf5\xff\xe9\xa9\x7e\xeb\xff\xc7\xdc\xff\x4c\x98\x49\x45\xf2\x3f\x00\x00\x00\x54\x41\xcc\xfd\xa7\xc3\x4c\xe4\x7f\x00\x00\x00\x28\x8d\x98\xfb\x67\xc3\x4c\xe4\x7f\x00\xfe\x9f\xbd\xbb\x78\xf9\x24\xbb\xe2\x38\xfc\x6e\x66\xa0\x17\x09\xf9\x63\xe3\xd6\x71\x77\x77\x77\x77\x77\x77\x77\x77\x77\x37\x48\x08\x9c\x73\x48\xd2\xd5\xb7\xd2\xdd\x35\xf4\xad\x7b\x9e\x67\x73\xe0\x85\xe1\xfe\x06\x7a\xf3\x5d\x7c\x28\x00\x00\x96\x91\xbb\xff\x8e\x71\x4b\x93\xfd\xaf\xff\xd7\xff\xeb\xff\x67\xe9\xff\xef\x70\x71\x71\xa1\xff\xd7\xff\xeb\xff\x6f\x94\xfe\x7f\x4c\xff\xbf\x43\xff\xaf\xff\xd7\xff\xeb\xff\x39\xd4\x6c\xfd\x7f\xee\xfe\x3b\xc5\x2d\x4d\xf6\x3f\x00\x00\x00\x74\x90\xbb\xff\xce\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\x7f\x97\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\xbf\x6b\xdc\xd2\x64\xff\xeb\xff\xf5\xff\xfa\xff\x59\xfa\x7f\xdf\xff\xd7\xff\xeb\xff\x8f\xa0\xff\x1f\xd3\xff\xef\xd0\xff\xeb\xff\xf5\xff\xfa\x7f\x0e\x35\x5b\xff\x9f\xbb\xff\x6e\x71\x4b\x93\xfd\x0f\x00\x00\x00\x1d\xe4\xee\xbf\x7b\xdc\x62\xff\x03\x00\x00\xc0\x32\x72\xf7\xdf\x23\x6e\xb1\xff\x01\x00\x00\x60\x19\xb9\xfb\xef\x19\xb7\x34\xd9\xff\xfa\x7f\xfd\xbf\xfe\x5f\xff\xaf\xff\xdf\x7e\x5f\xff\x7f\x4e\xfa\xff\x31\xfd\xff\x0e\xfd\xbf\xfe\x5f\xff\xaf\xff\xe7\x50\xb3\xf5\xff\xb9\xfb\xef\x15\xb7\x34\xd9\xff\x00\x00\x00\xd0\x41\xee\xfe\x7b\xc7\x2d\xf6\x3f\x00\x00\x00\x2c\x23\x77\xff\xe5\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\xbf\x4f\xdc\x72\xb2\xfd\x7f\xbb\xeb\xfc\xef\xf4\xff\xfa\x7f\xfd\xbf\xfe\x5f\xff\xbf\xfd\xbe\xfe\xff\x9c\xf4\xff\x63\xfa\xff\x1d\xfa\x7f\xfd\xbf\xfe\x5f\xff\xcf\xa1\x66\xeb\xff\x73\xf7\xdf\x37\x6e\x39\xd9\xfe\x07\x00\x00\x00\xae\x2e\x77\xff\xfd\xe2\x16\xfb\x1f\x00\x00\x00\x96\x91\xbb\xff\xfe\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\x80\xb8\xa5\xc9\xfe\xd7\xff\xeb\xff\xf5\xff\xfa\x7f\xfd\xff\xf6\xfb\xfa\xff\x73\xd2\xff\x8f\xe9\xff\x77\xe8\xff\xf5\xff\xfa\x7f\xfd\x3f\x87\x9a\xad\xff\xcf\xdd\xff\xc0\xb8\xa5\xc9\xfe\x07\x00\x00\x80\x0e\x72\xf7\x3f\x28\x6e\xb1\xff\x01\x00\x00\x60\x19\xb9\xfb\x1f\x1c\xb7\xd8\xff\x00\x00\x00\xb0\x8c\xdc\xfd\x0f\x89\x5b\x9a\xec\x7f\xfd\xbf\xfe\x5f\xff\xaf\xff\xd7\xff\x6f\xbf\xaf\xff\x3f\x27\xfd\xff\x98\xfe\x7f\x87\xfe\x5f\xff\xaf\xff\xd7\xff\x73\xa8\xd9\xfa\xff\xdc\xfd\x0f\x8d\x5b\x9a\xec\x7f\x00\x00\x00\xe8\x20\x77\xff\xc3\xe2\x16\xfb\x1f\x00\x00\x00\x96\x91\xbb\xff\xe1\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\x88\xb8\xa5\xc9\xfe\xd7\xff\xeb\xff\xf5\xff\xfa\x7f\xfd\xff\xf6\xfb\xfa\xff\x73\xd2\xff\x8f\xe9\xff\x77\xe8\xff\xf5\xff\xfa\x7f\xfd\x3f\x87\x9a\xad\xff\xcf\xdd\xff\xc8\xb8\xa5\xc9\xfe\x07\x00\x00\x80\x0e\x72\xf7\x3f\x2a\x6e\xb1\xff\x01\x00\x00\x60\x19\xb9\xfb\x1f\x1d\xb7\xd8\xff\x00\x00\x00\xb0\x8c\xdc\xfd\x8f\x89\x5b\x9a\xec\x7f\xfd\xbf\xfe\x5f\xff\xaf\xff\xd7\xff\x6f\xbf\xaf\xff\x3f\x27\xfd\xff\x98\xfe\x7f\xc7\x6a\xfd\xff\xad\xd7\xf4\x7f\x7f\xd3\xfb\xf9\x1b\x75\xb3\x7f\xbf\xfe\x5f\xff\xcf\x95\x66\xeb\xff\x73\xf7\x3f\x36\x6e\x69\xb2\xff\x01\x00\x00\xa0\x83\xdc\xfd\x8f\x8b\x5b\xec\x7f\x00\x00\x00\x58\x46\xee\xfe\xc7\xc7\x2d\xf6\x3f\x00\x00\x00\x2c\x23\x77\xff\x13\xe2\x96\x26\xfb\x5f\xff\xaf\xff\xd7\xff\xeb\xff\xf5\xff\xdb\xef\xeb\xff\xcf\x49\xff\x3f\xa6\xff\xdf\xb1\x5a\xff\x7f\x8d\x6e\x76\x3f\x7f\xf6\xdf\xaf\xff\xd7\xff\x73\xa5\xd9\xfa\xff\xdc\xfd\x4f\x8c\x5b\x9a\xec\x7f\x00\x00\x00\xe8\x20\x77\xff\x93\xe2\x16\xfb\x1f\x00\x00\x00\x96\x91\xbb\xff\xc9\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\x94\xb8\xa5\xc9\xfe\xd7\xff\xeb\xff\xff\xb3\x9f\xcf\xdf\xa1\xff\xd7\xff\xeb\xff\xf5\xff\x67\xa5\xff\x1f\xd3\xff\xef\xd0\xff\xeb\xff\xf5\xff\xc7\xf5\xff\xff\xfe\xa3\xfe\xbf\xbd\xd9\xfa\xff\xdc\xfd\x4f\x8d\x5b\x9a\xec\x7f\x00\x00\x00\xe8\x20\x77\xff\xd3\xe2\x16\xfb\x1f\x00\x00\x00\x96\x91\xbb\xff\xe9\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\x8c\xb8\xa5\xc9\xfe\xd7\xff\xeb\xff\x7d\xff\x5f\xff\xaf\xff\xdf\x7e\x5f\xff\x7f\x4e\xfa\xff\x31\xfd\xff\x0e\xfd\xbf\xfe\x5f\xff\xef\xfb\xff\x1c\x6a\xb6\xfe\x3f\x77\xff\x33\xe3\x96\x26\xfb\x1f\x00\x00\x00\x3a\xc8\xdd\xff\xac\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\x7f\x76\xdc\x62\xff\x03\x00\x00\xc0\x32\x72\xf7\x3f\x27\x6e\x69\xb2\xff\xaf\xbb\xff\xbf\xfd\xc5\xc5\x85\xfe\xbf\xe8\xff\xff\xfb\xf7\xeb\xff\xb7\xff\x7d\xe8\xff\xf5\xff\xfa\xff\xdb\x9e\xfe\x7f\x4c\xff\xbf\x43\xff\xaf\xff\xd7\xff\xeb\xff\x39\xd4\x6c\xfd\x7f\xee\xfe\xe7\xc6\x2d\x4d\xf6\x3f\x00\x00\x00\x74\x90\xbb\xff\x79\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\xfc\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\x7f\x41\xdc\xd2\x64\xff\xfb\xfe\xbf\xfe\x5f\xff\xaf\xff\xd7\xff\x6f\xbf\xaf\xff\x3f\x27\xfd\xff\x98\xfe\x7f\x87\xfe\x5f\xff\xaf\xff\xd7\xff\x73\xa8\xd9\xfa\xff\xdc\xfd\x2f\x8c\x5b\x9a\xec\x7f\x00\x00\x00\xe8\x20\x77\xff\x8b\xe2\x16\xfb\x1f\x00\x00\x00\x96\x91\xbb\xff\xc5\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\x92\xb8\xa5\xc9\xfe\xd7\xff\xeb\xff\xf5\xff\xfa\xff\xd5\xfb\xff\x7f\x5e\xd6\xff\x77\xa2\xff\x1f\xd3\xff\xef\xd0\xff\xeb\xff\xf5\xff\xfa\x7f\x0e\x35\x5b\xff\x9f\xbb\xff\xa5\x71\x4b\x93\xfd\x0f\x00\x00\x00\x1d\xe4\xee\x7f\x59\xdc\x62\xff\x03\x00\x00\xc0\x32\x72\xf7\xbf\x3c\x6e\xb1\xff\x01\x00\x00\x60\x19\xb9\xfb\x5f\x11\xb7\x34\xd9\xff\xfa\x7f\xfd\xbf\xfe\x5f\xff\xbf\x7a\xff\xef\xfb\xff\xbd\xe8\xff\xc7\xf4\xff\x3b\xf4\xff\xfa\x7f\xfd\xbf\xfe\x9f\x43\xcd\xd6\xff\xe7\xee\x7f\x65\xdc\xd2\x64\xff\x03\x00\x00\x40\x07\xb9\xfb\x5f\x15\xb7\xd8\xff\x00\x00\x00\xb0\x8c\xdc\xfd\xaf\x8e\x5b\xec\x7f\x00\x00\x00\x58\x46\xee\xfe\xd7\xc4\x2d\x4d\xf6\xbf\xfe\x5f\xff\xaf\xff\xd7\xff\xeb\xff\xb7\xdf\xd7\xff\x9f\x93\xfe\x7f\x4c\xff\xbf\x43\xff\xaf\xff\xd7\xff\xeb\xff\x39\xd4\x6c\xfd\x7f\xee\xfe\xd7\xc6\x2d\x4d\xf6\x3f\x00\x00\x00\x74\x90\xbb\xff\x75\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\xfa\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\x7f\x43\xdc\xd2\x64\xff\xeb\xff\xf5\xff\xfa\x7f\xfd\xbf\xfe\x7f\xfb\x7d\xfd\xff\x39\xe9\xff\xc7\xf4\xff\x3b\xf4\xff\xfa\x7f\xfd\xbf\xfe\x9f\x43\xcd\xd6\xff\xe7\xee\x7f\x63\xdc\xd2\x64\xff\x03\x00\x00\x40\x07\xb9\xfb\xdf\x14\xb7\xd8\xff\x00\x00\x00\xb0\x8c\xdc\xfd\x6f\x8e\x5b\xec\x7f\x00\x00\x00\x58\x46\xee\xfe\xb7\xc4\x2d\x4d\xf6\xbf\xfe\x5f\xff\xaf\xff\xd7\xff\xeb\xff\xb7\xdf\xd7\xff\x9f\x93\xfe\x7f\x4c\xff\xbf\x43\xff\xaf\xff\xd7\xff\xeb\xff\x39\xd4\x6c\xfd\x7f\xee\xfe\xb7\xc6\x2d\x4d\xf6\x3f\x00\x00\x00\x74\x90\xbb\xff\x6d\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\xf6\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\x7f\x47\xdc\xd2\x64\xff\xeb\xff\xf5\xff\xfa\x7f\xfd\xbf\xfe\x7f\xfb\x7d\xfd\xff\x39\xe9\xff\xc7\xf4\xff\x3b\xf4\xff\xfa\x7f\xfd\xbf\xfe\x9f\x43\xcd\xd6\xff\xe7\xee\x7f\x67\xdc\xd2\x64\xff\x03\x00\x00\x40\x07\xb9\xfb\xdf\x15\xb7\xd8\xff\x00\x00\x00\xb0\x8c\xdc\xfd\xef\x8e\x5b\xec\x7f\x00\x00\x00\x58\x46\xee\xfe\xf7\xc4\x2d\x4d\xf6\xbf\xfe\x5f\xff\xaf\xff\xd7\xff\x5f\xd1\xff\x5f\xd2\xff\x5f\xe8\xff\x4f\x4b\xff\x3f\xa6\xff\xdf\xa1\xff\xd7\xff\xeb\xff\xf5\xff\x1c\x6a\xb6\xfe\x3f\x77\xff\x7b\xe3\x96\x26\xfb\x1f\x00\x00\x00\x3a\xc8\xdd\xff\xbe\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\x7f\x7f\xdc\x62\xff\x03\x00\x00\xc0\x32\x72\xf7\x7f\x20\x6e\x69\xb2\xff\xf5\xff\xfa\x7f\xfd\xbf\xfe\xdf\xf7\xff\xb7\xdf\xd7\xff\x9f\x93\xfe\x7f\x4c\xff\xbf\x43\xff\xaf\xff\xd7\xff\xeb\xff\x39\xd4\x6c\xfd\x7f\xee\xfe\x0f\xc6\x2d\x4d\xf6\x3f\x00\x00\x00\x74\x90\xbb\xff\x43\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\xe1\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\xff\x48\xdc\xd2\x64\xff\xeb\xff\xf5\xff\xfa\x7f\xfd\xbf\xfe\x7f\xfb\x7d\xfd\xff\x39\xe9\xff\xc7\xf4\xff\x3b\xf4\xff\xfa\x7f\xfd\xbf\xfe\x9f\x43\xcd\xd6\xff\xe7\xee\xff\x68\xdc\xd2\x64\xff\x03\x00\x00\x40\x07\xb9\xfb\x3f\x16\xb7\xd8\xff\x00\x00\x00\xb0\x8c\xdc\xfd\x1f\x8f\x5b\xec\x7f\x00\x00\x00\x58\x46\xee\xfe\x4f\xc4\x2d\x4d\xf6\xbf\xfe\x5f\xff\xaf\xff\xd7\xff\xeb\xff\xb7\xdf\xd7\xff\x9f\x93\xfe\x7f\x4c\xff\xbf\x43\xff\xaf\xff\xd7\xff\xeb\xff\x39\xd4\x6c\xfd\x7f\xee\xfe\x4f\xc6\x2d\x4d\xf6\x3f\x00\x00\x00\x74\x90\xbb\xff\x53\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\xe9\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\xff\x4c\xdc\xd2\x64\xff\xeb\xff\xf5\xff\xfa\x7f\xfd\xbf\xfe\x7f\xfb\x7d\xfd\xff\x39\xe9\xff\xc7\xf4\xff\x3b\xf4\xff\xfa\x7f\xfd\xbf\xfe\x9f\x43\xcd\xd6\xff\xe7\xee\xff\x6c\xdc\xd2\x64\xff\x03\x00\x00\x40\x07\xb9\xfb\x3f\x17\xb7\xd8\xff\x00\x00\x00\xb0\x8c\xdc\xfd\x9f\x8f\x5b\xec\x7f\x00\x00\x00\x58\x46\xee\xfe\x2f\xc4\x2d\x4d\xf6\xbf\xfe\x5f\xff\xaf\xff\xd7\xff\xeb\xff\xb7\xdf\xd7\xff\x9f\x93\xfe\x7f\x4c\xff\xbf\x43\xff\xaf\xff\xd7\xff\xeb\xff\x39\xd4\x6c\xfd\x7f\xee\xfe\x2f\xc6\x2d\x4d\xf6\x3f\x00\x00\x00\x74\x90\xbb\xff\x4b\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\xe5\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\xff\x4a\xdc\xd2\x64\xff\xeb\xff\xf5\xff\xfa\xff\xb5\xfa\xff\x5b\x06\xff\x3e\xf5\xff\xfa\xff\x0e\xf4\xff\x63\xfa\xff\x1d\xfa\x7f\xfd\xbf\xfe\x5f\xff\xcf\xa1\x66\xeb\xff\x73\xf7\x7f\x35\x6e\x69\xb2\xff\x01\x00\x00\xa0\x83\xdc\xfd\x5f\x8b\x5b\xec\x7f\x00\x00\x00\x58\x46\xee\xfe\xaf\xc7\x2d\xf6\x3f\x00\x00\x00\x2c\x23\x77\xff\x37\xe2\x96\x26\xfb\x5f\xff\xaf\xff\xd7\xff\xaf\xd5\xff\xfb\xfe\xbf\xfe\xbf\x3b\xfd\xff\x98\xfe\x7f\x87\xfe\x5f\xff\xaf\xff\xd7\xff\x73\xa8\xd9\xfa\xff\xdc\xfd\xdf\x8c\x5b\x9a\xec\x7f\x00\x00\x00\xe8\x20\x77\xff\xb7\xe2\x16\xfb\x1f\x00\x00\x00\x96\x91\xbb\xff\xdb\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\x9d\xb8\xa5\xc9\xfe\xd7\xff\xeb\xff\xf5\xff\xfa\x7f\xfd\xff\xf6\xfb\xfa\xff\x73\xd2\xff\x8f\xe9\xff\x77\xe8\xff\xf5\xff\xfa\x7f\xfd\x3f\x87\x9a\xad\xff\xcf\xdd\xff\xdd\xb8\xa5\xc9\xfe\x07\x00\x00\x80\x0e\x72\xf7\x7f\x2f\x6e\xb1\xff\x01\x00\x00\x60\x19\xb9\xfb\xbf\x1f\xb7\xd8\xff\x00\x00\x00\xb0\x8c\xdc\xfd\x3f\x88\x5b\x9a\xec\x7f\xfd\xbf\xfe\x5f\xff\xaf\xff\xd7\xff\x6f\xbf\xaf\xff\x3f\x27\xfd\xff\x98\xfe\x7f\x87\xfe\x5f\xff\xaf\xff\xd7\xff\x73\xa8\xd9\xfa\xff\xdc\xfd\x3f\x8c\x5b\x9a\xec\x7f\x00\x00\x00\xe8\x20\x77\xff\x8f\xe2\x16\xfb\x1f\x00\x00\x00\x96\x91\xbb\xff\xc7\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\x93\xb8\xa5\xc9\xfe\xd7\xff\xeb\xff\xf5\xff\xfa\xff\xe9\xfb\xff\x5b\xf4\xff\xfa\xff\xff\x9f\xfe\x7f\x4c\xff\xbf\x43\xff\xaf\xff\xd7\xff\xeb\xff\x39\xd4\x6c\xfd\x7f\xee\xfe\x9f\xc6\x2d\x4d\xf6\x3f\x00\x00\x00\x74\x90\xbb\xff\x67\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\xf3\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\xff\x45\xdc\xd2\x64\xff\xeb\xff\xf5\xff\xfa\x7f\xfd\xff\xf4\xfd\xbf\xef\xff\xeb\xff\xaf\x81\xfe\x7f\x4c\xff\xbf\x43\xff\xaf\xff\xd7\xff\xeb\xff\x39\xd4\x6c\xfd\x7f\xee\xfe\x5f\xc6\x2d\x4d\xf6\x3f\x00\x00\x00\x74\x90\xbb\xff\x57\x71\x8b\xfd\x0f\x00\x00\x00\xcb\xc8\xdd\xff\xeb\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\xff\x4d\xdc\xd2\x64\xff\xeb\xff\xf5\xff\xfa\x7f\xfd\xbf\xfe\x7f\xfb\x7d\xfd\xff\x39\xe9\xff\xc7\xf4\xff\x3b\xf4\xff\xfa\x7f\xfd\xbf\xfe\x9f\x43\xcd\xd6\xff\xe7\xee\xff\x6d\xdc\xd2\x64\xff\x03\x00\x00\x40\x07\xb9\xfb\x7f\x17\xb7\xd8\xff\x00\x00\x00\xb0\x8c\xdc\xfd\xbf\x8f\x5b\xec\x7f\x00\x00\x00\x58\x46\xee\xfe\x3f\xc4\x2d\x4d\xf6\xbf\xfe\x5f\xff\xaf\xff\xd7\xff\xeb\xff\xb7\xdf\xd7\xff\x9f\x93\xfe\x7f\xec\x6a\xfd\xff\xad\xff\xfb\x07\xfd\xbf\xfe\x5f\xff\xaf\xff\xd7\xff\x73\x80\xd9\xfa\xff\xdc\xfd\x7f\x8c\x5b\x9a\xec\x7f\x00\x00\x00\xe8\x20\x77\xff\x9f\xe2\x16\xfb\x1f\x00\x00\x00\x4e\xe9\xd2\xc6\xdf\x72\xf7\xff\x39\x6e\xb1\xff\x01\x00\x00\x60\x19\xb9\xfb\xff\x12\xb7\x34\xd9\xff\xfa\x7f\xfd\xbf\xfe\x5f\xff\xaf\xff\xdf\x7e\x5f\xff\x7f\x4e\xfa\xff\x31\xdf\xff\xdf\xa1\xff\xd7\xff\xeb\xff\xf5\xff\x1c\x6a\xb6\xfe\x3f\x77\xff\x5f\xe3\x96\x26\xfb\x1f\x00\x00\x00\x3a\xc8\xdd\xff\xb7\xb8\xc5\xfe\x07\x00\x00\x80\x65\xe4\xee\xff\x7b\xdc\x62\xff\x03\x00\x00\xc0\x32\x72\xf7\xff\x23\x6e\x69\xb2\xff\xf5\xff\xfa\x7f\xfd\xbf\xfe\x5f\xff\xbf\xfd\xbe\xfe\xff\x9c\xf4\xff\x63\xfa\xff\x1d\xfa\x7f\xfd\xbf\xfe\x5f\xff\xcf\xa1\x66\xeb\xff\x73\xf7\xff\x2b\x00\x00\xff\xff\x65\x59\x67\xc9", 24260);
syz_mount_image(/*fs=*/0x20005e00, /*dir=*/0x20005e40, /*flags=*/0, /*opts=*/0x20000140, /*chdir=*/1, /*size=*/0x5ec4, /*img=*/0x2000bd40);
		break;
	case 1:
memcpy((void*)0x20000040, ".\000", 2);
memcpy((void*)0x20000200, "./file0/../file0\000", 17);
		syscall(__NR_mount, /*src=*/0x20000040ul, /*dst=*/0x20000200ul, /*type=*/0ul, /*flags=MS_SHARED|MS_SYNCHRONOUS|MS_RDONLY|MS_DIRSYNC|MS_BIND*/0x101091ul, /*data=*/0ul);
		break;
	case 2:
memcpy((void*)0x20000080, "./file0\000", 8);
		syscall(__NR_mount, /*src=*/0ul, /*dst=*/0x20000080ul, /*type=*/0ul, /*flags=MS_LAZYTIME|MS_I_VERSION|MS_SHARED|MS_SLAVE|MS_PRIVATE|MS_POSIXACL|MS_REC|0x10020a7*/0x39d60a7ul, /*data=*/0ul);
		break;
	case 3:
memcpy((void*)0x20000040, ".\000", 2);
		res = syscall(__NR_openat, /*fd=*/0xffffff9c, /*file=*/0x20000040ul, /*flags=*/0, /*mode=*/0);
		if (res != -1)
				r[0] = res;
		break;
	case 4:
		syscall(__NR_getdents64, /*fd=*/r[0], /*ent=*/0x20000900ul, /*count=*/0x95ul);
		break;
	}

}
int main(void)
{
		syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul, /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/0x32ul, /*fd=*/-1, /*offset=*/0ul);
	syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul, /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/7ul, /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/0x32ul, /*fd=*/-1, /*offset=*/0ul);
	syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul, /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/0x32ul, /*fd=*/-1, /*offset=*/0ul);
	setup_cgroups();
	const char* reason;
	(void)reason;
	for (procid = 0; procid < 8; procid++) {
		if (fork() == 0) {
			use_temporary_dir();
			do_sandbox_none();
		}
	}
	sleep(1000000);
	return 0;
}
