// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE 

#include <dirent.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/prctl.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

static void sleep_ms(uint64_t ms)
{
	usleep(ms * 1000);
}

static uint64_t current_time_ms(void)
{
	struct timespec ts;
	if (clock_gettime(CLOCK_MONOTONIC, &ts))
	exit(1);
	return (uint64_t)ts.tv_sec * 1000 + (uint64_t)ts.tv_nsec / 1000000;
}

static void use_temporary_dir(void)
{
	char tmpdir_template[] = "./syzkaller.XXXXXX";
	char* tmpdir = mkdtemp(tmpdir_template);
	if (!tmpdir)
	exit(1);
	if (chmod(tmpdir, 0777))
	exit(1);
	if (chdir(tmpdir))
	exit(1);
}

static bool write_file(const char* file, const char* what, ...)
{
	char buf[1024];
	va_list args;
	va_start(args, what);
	vsnprintf(buf, sizeof(buf), what, args);
	va_end(args);
	buf[sizeof(buf) - 1] = 0;
	int len = strlen(buf);
	int fd = open(file, O_WRONLY | O_CLOEXEC);
	if (fd == -1)
		return false;
	if (write(fd, buf, len) != len) {
		int err = errno;
		close(fd);
		errno = err;
		return false;
	}
	close(fd);
	return true;
}

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
	unsigned char* out;
	unsigned long outlen;
	unsigned long outcnt;
	const unsigned char* in;
	unsigned long inlen;
	unsigned long incnt;
	int bitbuf;
	int bitcnt;
	jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
	long val = s->bitbuf;
	while (s->bitcnt < need) {
		if (s->incnt == s->inlen)
			longjmp(s->env, 1);
		val |= (long)(s->in[s->incnt++]) << s->bitcnt;
		s->bitcnt += 8;
	}
	s->bitbuf = (int)(val >> need);
	s->bitcnt -= need;
	return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
	s->bitbuf = 0;
	s->bitcnt = 0;
	if (s->incnt + 4 > s->inlen)
		return 2;
	unsigned len = s->in[s->incnt++];
	len |= s->in[s->incnt++] << 8;
	if (s->in[s->incnt++] != (~len & 0xff) ||
	    s->in[s->incnt++] != ((~len >> 8) & 0xff))
		return -2;
	if (s->incnt + len > s->inlen)
		return 2;
	if (s->outcnt + len > s->outlen)
		return 1;
	for (; len--; s->outcnt++, s->incnt++) {
		if (s->in[s->incnt])
			s->out[s->outcnt] = s->in[s->incnt];
	}
	return 0;
}
struct puff_huffman {
	short* count;
	short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
	int first = 0;
	int index = 0;
	int bitbuf = s->bitbuf;
	int left = s->bitcnt;
	int code = first = index = 0;
	int len = 1;
	short* next = h->count + 1;
	while (1) {
		while (left--) {
			code |= bitbuf & 1;
			bitbuf >>= 1;
			int count = *next++;
			if (code - count < first) {
				s->bitbuf = bitbuf;
				s->bitcnt = (s->bitcnt - len) & 7;
				return h->symbol[index + (code - first)];
			}
			index += count;
			first += count;
			first <<= 1;
			code <<= 1;
			len++;
		}
		left = (MAXBITS + 1) - len;
		if (left == 0)
			break;
		if (s->incnt == s->inlen)
			longjmp(s->env, 1);
		bitbuf = s->in[s->incnt++];
		if (left > 8)
			left = 8;
	}
	return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
	int len;
	for (len = 0; len <= MAXBITS; len++)
		h->count[len] = 0;
	int symbol;
	for (symbol = 0; symbol < n; symbol++)
		(h->count[length[symbol]])++;
	if (h->count[0] == n)
		return 0;
	int left = 1;
	for (len = 1; len <= MAXBITS; len++) {
		left <<= 1;
		left -= h->count[len];
		if (left < 0)
			return left;
	}
	short offs[MAXBITS + 1];
	offs[1] = 0;
	for (len = 1; len < MAXBITS; len++)
		offs[len + 1] = offs[len] + h->count[len];
	for (symbol = 0; symbol < n; symbol++)
		if (length[symbol] != 0)
			h->symbol[offs[length[symbol]]++] = symbol;
	return left;
}
static int puff_codes(struct puff_state* s,
		      const struct puff_huffman* lencode,
		      const struct puff_huffman* distcode)
{
	static const short lens[29] = {
				       3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
				       35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258};
	static const short lext[29] = {
				       0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
				       3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
	static const short dists[30] = {
					1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
					257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
					8193, 12289, 16385, 24577};
	static const short dext[30] = {
				       0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
				       7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
				       12, 12, 13, 13};
	int symbol;
	do {
		symbol = puff_decode(s, lencode);
		if (symbol < 0)
			return symbol;
		if (symbol < 256) {
			if (s->outcnt == s->outlen)
				return 1;
			if (symbol)
				s->out[s->outcnt] = symbol;
			s->outcnt++;
		} else if (symbol > 256) {
			symbol -= 257;
			if (symbol >= 29)
				return -10;
			int len = lens[symbol] + puff_bits(s, lext[symbol]);
			symbol = puff_decode(s, distcode);
			if (symbol < 0)
				return symbol;
			unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
			if (dist > s->outcnt)
				return -11;
			if (s->outcnt + len > s->outlen)
				return 1;
			while (len--) {
				if (dist <= s->outcnt && s->out[s->outcnt - dist])
					s->out[s->outcnt] = s->out[s->outcnt - dist];
				s->outcnt++;
			}
		}
	} while (symbol != 256);
	return 0;
}
static int puff_fixed(struct puff_state* s)
{
	static int virgin = 1;
	static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
	static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
	static struct puff_huffman lencode, distcode;
	if (virgin) {
		lencode.count = lencnt;
		lencode.symbol = lensym;
		distcode.count = distcnt;
		distcode.symbol = distsym;
		short lengths[FIXLCODES];
		int symbol;
		for (symbol = 0; symbol < 144; symbol++)
			lengths[symbol] = 8;
		for (; symbol < 256; symbol++)
			lengths[symbol] = 9;
		for (; symbol < 280; symbol++)
			lengths[symbol] = 7;
		for (; symbol < FIXLCODES; symbol++)
			lengths[symbol] = 8;
		puff_construct(&lencode, lengths, FIXLCODES);
		for (symbol = 0; symbol < MAXDCODES; symbol++)
			lengths[symbol] = 5;
		puff_construct(&distcode, lengths, MAXDCODES);
		virgin = 0;
	}
	return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
	static const short order[19] =
	    {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
	int nlen = puff_bits(s, 5) + 257;
	int ndist = puff_bits(s, 5) + 1;
	int ncode = puff_bits(s, 4) + 4;
	if (nlen > MAXLCODES || ndist > MAXDCODES)
		return -3;
	short lengths[MAXCODES];
	int index;
	for (index = 0; index < ncode; index++)
		lengths[order[index]] = puff_bits(s, 3);
	for (; index < 19; index++)
		lengths[order[index]] = 0;
	short lencnt[MAXBITS + 1], lensym[MAXLCODES];
	struct puff_huffman lencode = {lencnt, lensym};
	int err = puff_construct(&lencode, lengths, 19);
	if (err != 0)
		return -4;
	index = 0;
	while (index < nlen + ndist) {
		int symbol;
		int len;
		symbol = puff_decode(s, &lencode);
		if (symbol < 0)
			return symbol;
		if (symbol < 16)
			lengths[index++] = symbol;
		else {
			len = 0;
			if (symbol == 16) {
				if (index == 0)
					return -5;
				len = lengths[index - 1];
				symbol = 3 + puff_bits(s, 2);
			} else if (symbol == 17)
				symbol = 3 + puff_bits(s, 3);
			else
				symbol = 11 + puff_bits(s, 7);
			if (index + symbol > nlen + ndist)
				return -6;
			while (symbol--)
				lengths[index++] = len;
		}
	}
	if (lengths[256] == 0)
		return -9;
	err = puff_construct(&lencode, lengths, nlen);
	if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
		return -7;
	short distcnt[MAXBITS + 1], distsym[MAXDCODES];
	struct puff_huffman distcode = {distcnt, distsym};
	err = puff_construct(&distcode, lengths + nlen, ndist);
	if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
		return -8;
	return puff_codes(s, &lencode, &distcode);
}
static int puff(
    unsigned char* dest,
    unsigned long* destlen,
    const unsigned char* source,
    unsigned long sourcelen)
{
	struct puff_state s = {
	    .out = dest,
	    .outlen = *destlen,
	    .outcnt = 0,
	    .in = source,
	    .inlen = sourcelen,
	    .incnt = 0,
	    .bitbuf = 0,
	    .bitcnt = 0,
	};
	int err;
	if (setjmp(s.env) != 0)
		err = 2;
	else {
		int last;
		do {
			last = puff_bits(&s, 1);
			int type = puff_bits(&s, 2);
			err = type == 0 ? puff_stored(&s) : (type == 1 ? puff_fixed(&s) : (type == 2 ? puff_dynamic(&s) : -1));
			if (err != 0)
				break;
		} while (!last);
	}
	*destlen = s.outcnt;
	return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source, unsigned long sourcelen, int dest_fd)
{
	if (sourcelen < ZLIB_HEADER_WIDTH)
		return 0;
	source += ZLIB_HEADER_WIDTH;
	sourcelen -= ZLIB_HEADER_WIDTH;
	const unsigned long max_destlen = 132 << 20;
	void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ, MAP_PRIVATE | MAP_ANON, -1, 0);
	if (ret == MAP_FAILED)
		return -1;
	unsigned char* dest = (unsigned char*)ret;
	unsigned long destlen = max_destlen;
	int err = puff(dest, &destlen, source, sourcelen);
	if (err) {
		munmap(dest, max_destlen);
		errno = -err;
		return -1;
	}
	if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
		munmap(dest, max_destlen);
		return -1;
	}
	return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size, const char* loopname, int* loopfd_p)
{
	int err = 0, loopfd = -1;
	int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
	if (memfd == -1) {
		err = errno;
		goto error;
	}
	if (puff_zlib_to_file(data, size, memfd)) {
		err = errno;
		goto error_close_memfd;
	}
	loopfd = open(loopname, O_RDWR);
	if (loopfd == -1) {
		err = errno;
		goto error_close_memfd;
	}
	if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
		if (errno != EBUSY) {
			err = errno;
			goto error_close_loop;
		}
		ioctl(loopfd, LOOP_CLR_FD, 0);
		usleep(1000);
		if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
			err = errno;
			goto error_close_loop;
		}
	}
	close(memfd);
	*loopfd_p = loopfd;
	return 0;

error_close_loop:
	close(loopfd);
error_close_memfd:
	close(memfd);
error:
	errno = err;
	return -1;
}

static void reset_loop_device(const char* loopname)
{
	int loopfd = open(loopname, O_RDWR);
	if (loopfd == -1) {
		return;
	}
	if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
	}
	close(loopfd);
}

static long syz_mount_image(
    volatile long fsarg,
    volatile long dir,
    volatile long flags,
    volatile long optsarg,
    volatile long change_dir,
    volatile unsigned long size,
    volatile long image)
{
	unsigned char* data = (unsigned char*)image;
	int res = -1, err = 0, need_loop_device = !!size;
	char* mount_opts = (char*)optsarg;
	char* target = (char*)dir;
	char* fs = (char*)fsarg;
	char* source = NULL;
	char loopname[64];
	if (need_loop_device) {
		int loopfd;
		memset(loopname, 0, sizeof(loopname));
		snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
		if (setup_loop_device(data, size, loopname, &loopfd) == -1)
			return -1;
		close(loopfd);
		source = loopname;
	}
	mkdir(target, 0777);
	char opts[256];
	memset(opts, 0, sizeof(opts));
	if (strlen(mount_opts) > (sizeof(opts) - 32)) {
	}
	strncpy(opts, mount_opts, sizeof(opts) - 32);
	if (strcmp(fs, "iso9660") == 0) {
		flags |= MS_RDONLY;
	} else if (strncmp(fs, "ext", 3) == 0) {
		bool has_remount_ro = false;
		char* remount_ro_start = strstr(opts, "errors=remount-ro");
		if (remount_ro_start != NULL) {
			char after = *(remount_ro_start + strlen("errors=remount-ro"));
			char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
			has_remount_ro = ((before == '\0' || before == ',') && (after == '\0' || after == ','));
		}
		if (strstr(opts, "errors=panic") || !has_remount_ro)
			strcat(opts, ",errors=continue");
	} else if (strcmp(fs, "xfs") == 0) {
		strcat(opts, ",nouuid");
	}
	res = mount(source, target, fs, flags, opts);
	if (res == -1) {
		err = errno;
		goto error_clear_loop;
	}
	res = open(target, O_RDONLY | O_DIRECTORY);
	if (res == -1) {
		err = errno;
		goto error_clear_loop;
	}
	if (change_dir) {
		res = chdir(target);
		if (res == -1) {
			err = errno;
		}
	}

error_clear_loop:
	if (need_loop_device)
		reset_loop_device(loopname);
	errno = err;
	return res;
}

#define FS_IOC_SETFLAGS _IOW('f', 2, long)
static void remove_dir(const char* dir)
{
	int iter = 0;
	DIR* dp = 0;
	const int umount_flags = MNT_FORCE | UMOUNT_NOFOLLOW;

retry:
		while (umount2(dir, umount_flags) == 0) {
		}
	dp = opendir(dir);
	if (dp == NULL) {
		if (errno == EMFILE) {
	exit(1);
		}
	exit(1);
	}
	struct dirent* ep = 0;
	while ((ep = readdir(dp))) {
		if (strcmp(ep->d_name, ".") == 0 || strcmp(ep->d_name, "..") == 0)
			continue;
		char filename[FILENAME_MAX];
		snprintf(filename, sizeof(filename), "%s/%s", dir, ep->d_name);
			while (umount2(filename, umount_flags) == 0) {
			}
		struct stat st;
		if (lstat(filename, &st))
	exit(1);
		if (S_ISDIR(st.st_mode)) {
			remove_dir(filename);
			continue;
		}
		int i;
		for (i = 0;; i++) {
			if (unlink(filename) == 0)
				break;
			if (errno == EPERM) {
				int fd = open(filename, O_RDONLY);
				if (fd != -1) {
					long flags = 0;
					if (ioctl(fd, FS_IOC_SETFLAGS, &flags) == 0) {
					}
					close(fd);
					continue;
				}
			}
			if (errno == EROFS) {
				break;
			}
			if (errno != EBUSY || i > 100)
	exit(1);
				if (umount2(filename, umount_flags))
	exit(1);
		}
	}
	closedir(dp);
	for (int i = 0;; i++) {
		if (rmdir(dir) == 0)
			break;
		if (i < 100) {
			if (errno == EPERM) {
				int fd = open(dir, O_RDONLY);
				if (fd != -1) {
					long flags = 0;
					if (ioctl(fd, FS_IOC_SETFLAGS, &flags) == 0) {
					}
					close(fd);
					continue;
				}
			}
			if (errno == EROFS) {
				break;
			}
			if (errno == EBUSY) {
					if (umount2(dir, umount_flags))
	exit(1);
				continue;
			}
			if (errno == ENOTEMPTY) {
				if (iter < 100) {
					iter++;
					goto retry;
				}
			}
		}
	exit(1);
	}
}

static void kill_and_wait(int pid, int* status)
{
	kill(-pid, SIGKILL);
	kill(pid, SIGKILL);
	for (int i = 0; i < 100; i++) {
		if (waitpid(-1, status, WNOHANG | __WALL) == pid)
			return;
		usleep(1000);
	}
	DIR* dir = opendir("/sys/fs/fuse/connections");
	if (dir) {
		for (;;) {
			struct dirent* ent = readdir(dir);
			if (!ent)
				break;
			if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
				continue;
			char abort[300];
			snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort", ent->d_name);
			int fd = open(abort, O_WRONLY);
			if (fd == -1) {
				continue;
			}
			if (write(fd, abort, 1) < 0) {
			}
			close(fd);
		}
		closedir(dir);
	} else {
	}
	while (waitpid(-1, status, __WALL) != pid) {
	}
}

static void reset_loop()
{
	char buf[64];
	snprintf(buf, sizeof(buf), "/dev/loop%llu", procid);
	int loopfd = open(buf, O_RDWR);
	if (loopfd != -1) {
		ioctl(loopfd, LOOP_CLR_FD, 0);
		close(loopfd);
	}
}

static void setup_test()
{
	prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
	setpgrp();
	write_file("/proc/self/oom_score_adj", "1000");
	if (symlink("/dev/binderfs", "./binderfs")) {
	}
}

static void execute_one(void);

#define WAIT_FLAGS __WALL

static void loop(void)
{
	int iter = 0;
	for (;; iter++) {
		char cwdbuf[32];
		sprintf(cwdbuf, "./%d", iter);
		if (mkdir(cwdbuf, 0777))
	exit(1);
		reset_loop();
		int pid = fork();
		if (pid < 0)
	exit(1);
		if (pid == 0) {
			if (chdir(cwdbuf))
	exit(1);
			setup_test();
			execute_one();
			exit(0);
		}
		int status = 0;
		uint64_t start = current_time_ms();
		for (;;) {
			sleep_ms(10);
			if (waitpid(-1, &status, WNOHANG | WAIT_FLAGS) == pid)
				break;
			if (current_time_ms() - start < 5000)
				continue;
			kill_and_wait(pid, &status);
			break;
		}
		remove_dir(cwdbuf);
	}
}

uint64_t r[1] = {0xffffffffffffffff};

void execute_one(void)
{
		intptr_t res = 0;
	if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {}
memcpy((void*)0x20001500, "exfat\000", 6);
memcpy((void*)0x20001540, "./file0\000", 8);
memcpy((void*)0x20000380, "umask", 5);
*(uint8_t*)0x20000385 = 0x3d;
sprintf((char*)0x20000386, "%023llo", (long long)9);
*(uint8_t*)0x2000039d = 0x2c;
memcpy((void*)0x2000039e, "discard", 7);
*(uint8_t*)0x200003a5 = 0x2c;
memcpy((void*)0x200003a6, "uid", 3);
*(uint8_t*)0x200003a9 = 0x3d;
sprintf((char*)0x200003aa, "0x%016llx", (long long)0);
*(uint8_t*)0x200003bc = 0x2c;
memcpy((void*)0x200003bd, "iocharset", 9);
*(uint8_t*)0x200003c6 = 0x3d;
memcpy((void*)0x200003c7, "iso8859-14", 10);
*(uint8_t*)0x200003d1 = 0x2c;
*(uint8_t*)0x200003d2 = 0;
memcpy((void*)0x20002ac0, "\x78\x9c\xec\xdc\x7b\x98\x8e\x55\xdb\x30\xf0\x75\xae\xb5\x2e\xc6\x34\xe9\x6e\x92\xcd\xb0\xce\x75\x5e\xdc\x69\xb0\x4c\x92\x64\x93\x24\x9b\x24\x49\x92\x24\xbb\x84\xa4\x49\x92\x84\xc4\x90\x5d\x12\x92\x90\xed\x24\xd9\x0c\x21\xd9\x4c\x0c\xc6\x7e\xbf\xdf\x6f\x9a\x3c\x92\x24\xc9\x2e\xbb\xb0\xbe\x43\x4f\xef\xeb\x79\x9e\x9e\xf7\xf3\x7e\xdf\xf3\xbc\xaf\x3f\xe6\xfc\x1d\xc7\x3a\x66\x9d\x73\xdd\xe7\x79\xaf\x35\xe7\x3d\x73\x5f\xd7\x75\x1c\x73\xff\xd4\x69\x48\xf5\x86\x35\xaa\xd4\x27\x22\xf1\x2f\x81\xbf\x7e\x49\x11\x42\xc4\x08\x21\xfa\x0b\x21\x6e\x13\x42\x04\x42\x88\x32\xf1\x65\xe2\xaf\x1d\xcf\xa5\x20\xe5\x5f\x7b\x12\xf6\xef\xf5\x4c\xda\xcd\x5e\x01\xbb\x99\xb8\xff\xd9\x1b\xf7\x3f\x7b\xe3\xfe\x67\x6f\xdc\xff\xec\x8d\xfb\x9f\xbd\x71\xff\xb3\x37\xee\x7f\xf6\xc6\xfd\x67\x2c\x3b\xdb\x32\xad\xc0\xed\x3c\xb2\xef\xe0\xfb\xff\xd9\x19\xbf\xff\x67\x6f\xdc\xff\xec\x8d\xfb\x9f\xbd\x71\xff\xb3\x37\xee\x7f\xf6\xc6\xfd\xcf\xde\xb8\xff\xd9\x1b\xf7\x3f\x7b\xe3\xfe\x33\x96\x9d\xdd\xec\xfb\xcf\x3c\x6e\xee\xb8\xd9\xaf\x3f\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\xd9\xc3\x05\x7f\x9d\x16\x42\xfc\xc7\xfc\x66\xaf\x8b\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\xff\x3e\x3e\xe7\xcd\x5e\x01\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\xfe\xe7\x81\x90\x42\x09\x2d\x02\x91\x43\xe4\x14\x31\x22\x97\x88\x15\xb7\x88\x38\x71\xab\xc8\x2d\x6e\x13\x11\x71\xbb\x88\x17\x77\x88\x3c\xe2\x4e\x91\x57\xe4\x13\xf9\x45\x01\x91\x20\x0a\x8a\x42\xc2\x08\x14\x56\x90\x08\x45\x61\x51\x44\x44\xc5\x5d\xa2\xa8\xb8\x5b\x24\x8a\x62\xa2\xb8\x28\x21\x9c\x28\x29\x92\xc4\x3d\xa2\x94\xb8\x57\x94\x16\xf7\x89\x32\xe2\x7e\x51\x56\x3c\x20\xca\x89\xf2\xa2\x82\xa8\x28\x1e\x14\x95\xc4\x43\xa2\xb2\x78\x58\x54\x11\x8f\x88\xaa\xa2\x9a\xa8\x2e\x6a\x88\x47\x45\x4d\xf1\x98\xa8\x25\x1e\x17\xb5\xc5\x13\xa2\x8e\x78\x52\xd4\x15\x4f\x89\x7a\xe2\x69\x51\x5f\x3c\x23\x1a\x88\x67\x45\x43\xf1\x9c\x68\x24\x9e\x17\x8d\x45\x13\xd1\x54\x34\x13\xcd\xff\xbf\xf2\xdf\x16\xdd\xc4\x3b\xa2\xbb\xe8\x21\x52\x44\x4f\xd1\x4b\xbc\x2b\x7a\x8b\x3e\xa2\xaf\xe8\x27\xfa\x8b\xf7\xc4\x00\xf1\xbe\x18\x28\x3e\x10\x83\xc4\x60\x31\x44\x7c\x28\x86\x8a\x8f\xc4\x30\xf1\xb1\x18\x2e\x46\x88\x91\xe2\x13\x31\x4a\x8c\x16\x63\xc4\x58\x31\x4e\x8c\x17\xa9\xe2\x53\x31\x41\x7c\x26\x26\x8a\xcf\xc5\x24\x31\x59\x4c\x11\x53\x45\x9a\x98\x26\xa6\x8b\x2f\xc4\x0c\x31\x53\xcc\x12\x5f\x8a\xd9\xe2\x2b\x31\x47\xcc\x15\xf3\xc4\x7c\x91\x2e\xbe\x16\x0b\xc4\x42\x91\x21\x16\x89\xc5\x62\x89\xc8\x14\x4b\xc5\x32\xb1\x5c\xac\x10\x2b\xc5\x2a\xb1\x5a\xac\x11\x6b\xc5\x3a\xb1\x5e\x6c\x10\x1b\xc5\x26\xb1\x59\x6c\x11\x5b\xc5\x36\xb1\x5d\xec\x10\x3b\xc5\x2e\xb1\x5b\xec\x11\x7b\xc5\x3e\xb1\x5f\x1c\x10\xdf\x88\x2c\xf1\xed\xff\x63\xfe\xf9\x7f\xc8\xef\x0c\x02\x04\x48\x90\xa0\x41\x43\x0e\xc8\x01\x31\x10\x03\xb1\x10\x0b\x71\x10\x07\xb9\x21\x37\x44\x20\x02\xf1\x10\x0f\x79\x20\x0f\xe4\x85\xbc\x90\x1f\xf2\x43\x02\x24\x40\x21\x28\x04\x08\x08\x04\x04\x85\xa1\x30\x44\x21\x0a\x45\xa1\x28\x24\x42\x22\x14\x87\xe2\xe0\xc0\x41\x12\x24\x41\x29\xb8\x17\x4a\x43\x69\x28\x73\xa1\xf0\x1f\x2f\xb7\xf2\x50\x1e\x2a\x42\x45\xa8\x04\x95\xa0\x32\x54\x86\x2a\x50\x05\xaa\x42\x55\xa8\x0e\xd5\xe1\x51\x78\x14\x1e\x83\x5a\x50\x0b\x6a\x43\x6d\xa8\x03\x75\xa0\x2e\xd4\x85\x7a\x50\x0f\xea\x43\x7d\x68\x00\x0d\xa0\x21\x34\x84\x46\xd0\x08\x1a\x43\x63\x68\x0a\x4d\xa1\x39\x34\x87\x16\xd0\x02\x5a\x42\x4b\x68\x0d\xad\xa1\x0d\xb4\x81\xb6\xd0\x16\x92\x21\x19\xda\x41\x3b\x68\x0f\xed\xa1\x03\x74\x80\x8e\xd0\x11\x3a\x41\x27\xe8\x0c\x5d\xa0\x0b\xbc\x0d\x6f\xc3\x3b\xf0\x0e\xf4\x80\xaa\xb2\x27\xf4\x82\x5e\xd0\x1b\x7a\x43\x5f\xe8\x07\xfd\xe0\x3d\x18\x00\xef\xc3\xfb\xf0\x01\x0c\x82\xc1\x30\x04\x3e\x84\x0f\xe1\x23\x18\x06\xe7\x60\x38\x8c\x80\x91\x30\x12\x2a\xc9\xd1\x30\x06\xc6\x02\xc9\xf1\x90\x0a\xa9\x30\x01\x26\xc0\x44\x98\x08\x93\x60\x32\x4c\x86\xa9\x90\x06\xd3\x60\x3a\x4c\x87\x19\x30\x13\x66\xc2\x97\x30\x1b\xbe\x82\xaf\x60\x2e\xcc\x85\xf9\x90\x0e\xe9\xb0\x00\x16\x42\x06\x64\xc0\x62\x38\x0f\x99\xb0\x14\x96\xc1\x72\x58\x01\x2b\x61\x05\xac\x86\x35\xb0\x1a\xd6\xc1\x7a\x58\x07\x1b\x61\x23\x6c\x86\xcd\xb0\x15\xb6\xc2\x76\xd8\x0e\x3b\x61\x27\xec\x86\xdd\xb0\x17\xf6\xc2\x7e\xd8\x0f\x83\x20\x0b\xb2\xe0\x20\x1c\x84\x43\x70\x08\x0e\xc3\x61\x38\x02\x47\xe0\x28\x1c\x85\x63\x70\x0c\x8e\xc3\x71\x38\x01\x27\xe0\x24\x9c\x82\xd3\x70\x0a\xce\xc2\x59\x38\x07\xe7\xe1\x02\x5c\x80\x4b\x70\x09\x2e\xc3\x65\xb8\x0a\x57\xaf\xfd\xf2\xcb\x6b\xb4\xd4\x32\x87\xcc\x21\x63\x64\x8c\x8c\x95\xb1\x32\x4e\xc6\xc9\xdc\x32\xb7\x8c\xc8\x88\x8c\x97\xf1\x32\x8f\xcc\x23\xf3\xca\xbc\x32\xbf\xcc\x2f\x13\x64\x82\x2c\x24\x0b\x49\x94\x28\x49\x86\xb2\xb0\x2c\x2c\xa3\x32\x2a\x8b\xca\xa2\x32\x51\x26\xca\xe2\xb2\xb8\x74\xd2\xc9\x24\x99\x24\x4b\xc9\x52\xb2\xb4\x2c\x2d\xcb\xc8\xfb\x65\x59\xf9\x80\x2c\x27\xcb\xcb\x56\xae\xa2\xac\x28\x2b\xc9\xd6\xae\xb2\x7c\x58\x56\x91\x55\x64\x55\x59\x4d\x56\x97\x35\x64\x0d\x59\x53\xd6\x94\xb5\x64\x2d\x59\x5b\xd6\x96\x75\x64\x1d\x59\x57\x3e\x25\xeb\xc9\x9e\xd0\x17\x9e\x91\xd7\x3a\xd3\x50\x0e\x86\x46\x72\x08\x34\x96\x4d\x64\x53\xd9\x4c\x7e\x04\x2f\xc8\x16\x72\x18\xb4\x94\xad\x64\x6b\xf9\x92\x1c\x01\xc3\xa1\xad\x6c\xe1\x92\xe5\xab\xb2\x9d\x1c\x03\xed\xe5\xeb\x72\x2c\xbc\x21\x3b\xca\xf1\xd0\x49\xbe\x25\x3b\xcb\x2e\xb2\xab\x7c\x5b\x76\x93\x2d\x5d\x77\xd9\x43\x4e\x82\x9e\xb2\x97\x9c\x0a\xbd\x65\x1f\xd9\x57\xf6\x93\x33\xa0\x9a\xbc\xd6\xb1\xea\xf2\x03\x39\x48\x0e\x96\x43\xe4\x87\x72\x3e\x7c\x24\x87\xc9\x8f\xe5\x70\x39\x42\x8e\x94\x9f\xc8\x51\x72\xb4\x1c\x23\xc7\xca\x71\x72\xbc\x4c\x95\x9f\xca\x09\xf2\x33\x39\x51\x7e\x2e\x27\xc9\xc9\x72\x8a\x9c\x2a\xd3\xe4\x34\x39\x5d\x7e\x21\x67\xc8\x99\x72\x96\xfc\x52\xce\x96\x5f\xc9\x39\x72\xae\x9c\x27\xe7\xcb\x74\xf9\xb5\x5c\x20\x17\xca\x0c\xb9\x48\x2e\x96\x4b\x64\xa6\x5c\x2a\x97\xc9\xe5\x72\x85\x5c\x29\x57\xc9\xd5\x72\x8d\x5c\x2b\xd7\xc9\xf5\x72\x83\xdc\x28\x37\xc9\xcd\x72\x8b\xdc\x2a\xb7\xc9\xed\x72\x87\xdc\x29\x77\xc9\xdd\x72\x8f\xdc\x2b\xf7\xc9\xfd\xf2\x80\xfc\x46\x66\xc9\x6f\xe5\x41\xf9\x17\x79\x48\x7e\x27\x0f\xcb\xef\xe5\x11\xf9\x83\x3c\x2a\x7f\x94\xc7\xe4\x4f\xf2\xb8\xfc\x59\x9e\x90\xbf\xc8\x93\xf2\x94\x3c\x2d\xcf\xc8\xb3\xf2\x57\x79\x4e\x9e\x97\x17\xe4\x45\x79\x49\xfe\x26\x2f\xcb\x2b\xf2\xaa\xf4\x52\x28\x50\x52\x29\xa5\x55\xa0\x72\xa8\x9c\x2a\x46\xe5\x52\xb1\xea\x16\x15\xa7\x6e\x55\xb9\xd5\x6d\x2a\xa2\x6e\x57\xf1\xea\x0e\x95\x47\xdd\xa9\xf2\xaa\x7c\x2a\xbf\x2a\xa0\x12\x54\x41\x55\x48\x19\x85\xca\x2a\x52\xa1\x2a\xac\x8a\xa8\xa8\xba\x4b\x15\x55\x77\xab\x44\x55\x4c\x15\x57\x25\x94\x53\x25\x55\x92\xba\x47\x95\x52\xf7\xaa\xd2\xea\x3e\x55\x46\xdd\xaf\xca\xaa\x07\x54\x39\x55\x5e\x55\x50\x15\xd5\x83\xaa\x92\x7a\x48\x55\x56\x0f\xab\x2a\xea\x11\x55\x55\x55\x53\xd5\x55\x0d\xf5\xa8\xaa\xa9\x1e\x53\xb5\xd4\xe3\xaa\xb6\x7a\x42\xd5\x51\x4f\xaa\xba\xea\x29\x55\x4f\x3d\xad\xea\xab\x67\x54\x03\xf5\xac\x6a\xa8\x9e\x53\x8d\xd4\xf3\xaa\xb1\x6a\xa2\x9a\xaa\x66\xaa\xb9\x7a\x41\xb5\x50\x2f\xaa\x96\xaa\x95\x6a\xad\x5e\x52\x6d\xd4\xcb\xaa\xad\x7a\x45\x25\xab\x57\x55\x3b\xf5\x9a\x6a\xaf\x5e\x57\x1d\xd4\x1b\xaa\xa3\x7a\x53\x75\x52\x6f\xa9\xce\xaa\x8b\xea\xaa\xae\xa8\xab\xca\xab\xee\xaa\x87\x4a\x51\x3d\x55\x2f\xf5\xae\xea\xad\xfa\xa8\xbe\xaa\x9f\xea\xaf\xde\x53\x03\xd4\xfb\x6a\xa0\xfa\x40\x0d\x52\x83\xd5\x10\xf5\xa1\x1a\xaa\x3e\x52\xc3\xd4\xc7\x6a\xb8\x1a\xa1\x46\xaa\x4f\xd4\x28\x35\x5a\x8d\x51\x63\xd5\x38\x35\x5e\xa5\xaa\x4f\xd5\x04\xf5\x99\x9a\xa8\x3e\x57\x93\xd4\x64\x35\x45\x4d\x55\x69\x6a\x9a\xea\xfb\x47\xa5\x59\xff\x8d\xfc\xcf\xfe\x49\xfe\xc0\xdf\x9f\x7d\xb3\xda\xa2\xb6\xaa\x6d\x6a\xbb\xda\xa1\x76\xaa\x5d\x6a\xb7\xda\xa3\xf6\xa8\x7d\x6a\x9f\x3a\xa0\x0e\xa8\x2c\x95\xa5\x0e\xaa\x83\xea\x90\x3a\xa4\x0e\xab\xc3\xea\x88\x3a\xa2\x8e\xaa\xa3\xea\x98\x3a\xa6\x8e\xab\xe3\xea\x84\x3a\xa1\x4e\xaa\x53\xea\xa2\x3a\xa3\xce\xaa\x5f\xd5\x39\x75\x5e\x9d\x57\x17\xd5\x25\x75\x49\x5d\xfe\xe3\x67\x20\x34\x68\xa9\x95\xd6\x3a\xd0\x39\x74\x4e\x1d\xa3\x73\xe9\x58\x7d\x8b\x8e\xd3\xb7\xea\xdc\xfa\x36\x1d\xd1\xb7\xeb\x78\x7d\x87\xce\xa3\xef\xd4\x79\x75\x3e\x9d\x5f\x17\xd0\x09\xba\xa0\x2e\xa4\x8d\x46\x6d\x35\xe9\x50\x17\xd6\x45\x74\x54\xdf\xa5\x8b\xea\xbb\x75\xa2\x2e\xa6\x8b\xeb\x12\xda\xe9\x92\x3a\x49\xdf\xf3\x2f\xe7\xdf\x68\x7d\xcd\x75\x73\xdd\x42\xb7\xd0\x2d\x75\x4b\xdd\x5a\xb7\xd6\x6d\x74\x1b\xdd\x56\xb7\xd5\xc9\x3a\x59\xb7\xd3\xed\x74\x7b\xdd\x5e\x77\xd0\x1d\x74\x47\xdd\x51\x77\xd2\x9d\x74\x67\xdd\x59\x77\xd5\x5d\x75\x37\xdd\x4d\x77\xd7\xdd\x75\x8a\x4e\xd1\xbd\xf4\xbb\xba\xb7\xee\xa3\xfb\xea\x7e\xba\xbf\x7e\x4f\x0f\xd0\x03\xf4\x40\x3d\x50\x0f\xd2\x83\xf4\x10\x3d\x44\x0f\xd5\x43\xf5\x30\x3d\x4c\x0f\xd7\xc3\xf5\x48\x3d\x52\x8f\xd2\xa3\xf4\x18\x3d\x46\x8f\xd3\xe3\x74\xaa\x4e\xd5\x13\xf4\x04\x3d\x51\x4f\xd4\x93\xf4\x24\x3d\x45\x4f\xd1\x69\x3a\x4d\x4f\xd7\xd3\xf5\x0c\x3d\x43\xcf\xd2\xb3\xf4\x6c\x3d\x5b\xcf\xd1\x73\xf4\x3c\x3d\x4f\xa7\xeb\x74\xbd\x40\x2f\xd0\x19\x3a\x43\x2f\xd6\x8b\x75\xa6\x5e\xaa\x97\xea\xe5\x7a\xb9\x5e\xa9\x57\xea\xd5\x7a\xb5\x5e\xab\xd7\xea\xf5\x7a\xbd\xde\xa8\x37\xea\x4c\xbd\x45\x6f\xd1\xdb\xf4\x36\xbd\x43\xef\xd0\xbb\xf4\x2e\xbd\x47\xef\xd1\xfb\xf4\x3e\x7d\x40\x1f\xd0\x59\x3a\x4b\x1f\xd4\x07\xf5\x21\x7d\x48\x1f\xd6\x87\xf5\x11\x7d\x44\x1f\xd5\x47\xf5\x31\x7d\x4c\x1f\xd7\xc7\xf5\x09\x7d\x42\x9f\xd4\x27\xf5\x69\x7d\x5a\x9f\xd5\x67\xf5\x39\x7d\x4e\x5f\xd0\x17\xf4\x25\x7d\x49\x5f\xd6\x97\xf5\x55\x7d\xf5\xda\x69\x5f\x20\x03\x19\xe8\x40\x07\x39\x82\x1c\x41\x4c\x10\x13\xc4\x06\xb1\x41\x5c\x10\x17\xe4\x0e\x72\x07\x91\x20\x12\xc4\x07\xf1\x41\x9e\xe0\xce\x20\x6f\x90\x2f\xc8\x1f\x14\x08\x12\x82\x82\x41\xa1\xc0\x04\x18\xd8\x80\x82\x30\x28\x1c\x14\x09\xa2\xc1\x5d\x41\xd1\xe0\xee\x20\x31\x28\x16\x14\x0f\x4a\x04\x2e\x28\x19\x24\x05\xf7\x04\xa5\x82\x7b\x83\xd2\xc1\x7d\x41\x99\xe0\xfe\xa0\x6c\xf0\x40\x50\x2e\x28\x1f\x54\x08\x2a\x06\x0f\x06\x95\x82\x87\x82\xca\xc1\xc3\x41\x95\xe0\x91\xa0\x6a\x50\x2d\xa8\x1e\xd4\x08\x1e\x0d\x6a\x06\x8f\x05\xb5\x82\xc7\x83\xda\xc1\x13\x41\x9d\xe0\xc9\xa0\x6e\xf0\x54\x50\x2f\x78\x3a\xa8\x1f\x3c\x13\x34\x08\x9e\x0d\x1a\x06\xcf\x05\x8d\x82\xe7\x83\xc6\x41\x93\xa0\x69\xd0\x2c\x68\xfe\x6f\xad\xef\xfd\xb9\x7c\x2f\xba\xee\xa6\x87\x49\x31\x3d\x4d\x2f\xf3\xae\xe9\x6d\xfa\x98\xbe\xa6\x9f\xe9\x6f\xde\x33\x03\xcc\xfb\x66\xa0\xf9\xc0\x0c\x32\x83\xcd\x10\xf3\xa1\x19\x6a\x3e\x32\xc3\xcc\xc7\x66\xb8\x19\x61\x46\x9a\x4f\xcc\x28\x33\xda\x8c\x31\x63\xcd\x38\x33\xde\xa4\x9a\x4f\xcd\x04\xf3\x99\x99\x68\x3e\x37\x93\xcc\x64\x33\xc5\x4c\x35\x69\x66\x9a\x99\x6e\xbe\x30\x33\xcc\x4c\x33\xcb\x7c\x69\x66\x9b\xaf\xcc\x1c\x33\xd7\xcc\x33\xf3\x4d\xba\xf9\xda\x2c\x30\x0b\x4d\x86\x59\x64\x16\x9b\x25\x26\xd3\x2c\x35\xcb\xcc\x72\xb3\xc2\xac\x34\xab\xcc\x6a\xb3\xc6\xac\x35\xeb\xcc\x7a\xb3\xc1\x6c\x34\x9b\xcc\x66\xb3\xc5\x6c\x35\xdb\xcc\x76\xb3\xc3\xec\x34\xbb\xcc\x6e\xb3\xc7\xec\x35\xfb\xcc\x7e\x73\xc0\x7c\x63\xb2\xcc\xb7\xe6\xa0\xf9\x8b\x39\x64\xbe\x33\x87\xcd\xf7\xe6\x88\xf9\xc1\x1c\x35\x3f\x9a\x63\xe6\x27\x73\xdc\xfc\x6c\x4e\x98\x5f\xcc\x49\x73\xca\x9c\x36\x67\xcc\x59\xf3\xab\x39\x67\xce\x9b\x0b\xe6\xa2\xb9\x64\x7e\x33\x97\xcd\x15\x73\xd5\xf8\x6b\x27\xf7\xd7\xde\xde\x51\xa3\xc6\x1c\x98\x03\x63\x30\x06\x63\x31\x16\xe3\x30\x0e\x73\x63\x6e\x8c\x60\x04\xe3\x31\x1e\xf3\x60\x1e\xcc\x8b\x79\x31\x3f\xe6\xc7\x04\x4c\xc0\x42\x58\x08\xaf\x21\x24\x2c\x8c\x85\x31\x8a\x51\x2c\x8a\x45\x31\x11\x13\xb1\x38\x16\x47\x87\x0e\x93\x30\x09\x4b\x61\x29\x2c\x8d\xa5\xb1\x0c\x96\xc1\xb2\x58\x16\xcb\x61\x39\xac\x80\x15\xf0\x41\x7c\x10\x1f\xc2\x87\xf0\x61\x7c\x18\x1f\xc1\x47\xb0\x1a\x56\xc3\x1a\x58\x03\x6b\x62\x4d\xac\x85\xb5\xb0\x36\xd6\xc6\x3a\x58\x07\xeb\x62\x5d\xac\x87\xf5\xb0\x3e\xd6\xc7\x06\xd8\x00\x1b\x62\x43\x6c\x84\x8d\xb0\x31\x36\xc6\xa6\xd8\x14\x9b\x63\x73\x6c\x81\x2d\xb0\x25\xb6\xc4\xd6\xd8\x1a\xdb\x60\x1b\x6c\x8b\x6d\x31\x19\x93\xb1\x1d\xb6\xc3\xf6\xd8\x1e\x3b\x60\x07\xec\x88\x1d\xb1\x13\x76\xc2\xce\xd8\x19\xbb\x62\x57\xec\x86\xdd\xb0\x3b\x76\xc7\x14\x4c\xc1\x5e\xd8\x0b\x7b\x63\x6f\xec\x8b\x7d\xb1\x3f\xf6\xc7\x01\x38\x00\x07\xe2\x40\x1c\x84\x83\x70\x08\x0e\xc1\xa1\x38\x14\x87\xe1\x30\x1c\x8e\x23\x70\x24\x7e\x82\xa3\x70\x34\x8e\xc1\xb1\x38\x0e\xc7\x63\x2a\xa6\xe2\x04\x9c\x80\x13\x71\x22\x4e\xc2\x49\x38\x05\xa7\x60\x1a\xa6\xe1\x74\x9c\x8e\x33\x70\x06\xce\xc2\x59\x38\x1b\x67\xe3\x1c\x9c\x83\xf3\x70\x1e\xa6\x63\x3a\x2e\xc0\x05\x98\x81\x19\xb8\x18\x17\x63\x26\x66\xe2\x32\x5c\x86\x2b\x70\x05\xae\xc2\x55\xb8\x06\xd7\xe0\x3a\x5c\x87\x1b\x70\x03\x6e\xc2\x4d\xb8\x05\xb7\xe0\x36\xdc\x86\x3b\x70\x07\xee\xc2\x5d\xb8\x07\xf7\xe0\x3e\xdc\x87\x07\xf0\x00\x66\x61\x16\x1e\xc4\x83\x78\x08\x0f\xe1\x61\x3c\x8c\x47\xf0\x08\x1e\xc5\xa3\x78\x0c\x8f\xe1\x71\x3c\x8e\x27\xf0\x04\x9e\xc4\x93\x78\x1a\x4f\xe3\x59\x3c\x8b\xe7\xf0\x1c\x5e\xc0\x0b\x78\x09\x7f\xc3\xcb\x78\x05\xaf\xa2\xc7\x18\x9b\xcb\xc6\xda\x5b\x6c\x9c\xbd\xd5\xe6\xb6\xb7\xd9\x7f\x8c\xf3\xdb\x02\x36\xc1\x16\xb4\x85\xac\xb1\x79\x6d\xbe\xbf\x8b\xd1\x5a\x9b\x68\x8b\xd9\xe2\xb6\x84\x75\xb6\xa4\x4d\xb2\xf7\xfc\x29\x2e\x67\xcb\xdb\x0a\xb6\xa2\x7d\xd0\x56\xb2\x0f\xd9\xca\x7f\x8a\x6b\xda\xc7\x6c\x2d\xfb\xb8\xad\x6d\x9f\xb0\x35\xec\xa3\x7f\x17\xd7\xb1\x4f\xda\xba\xf6\x39\x5b\xcf\x3e\x6f\xeb\xdb\x26\xb6\x81\x6d\x66\x1b\xda\xe7\x6c\x23\xfb\xbc\x6d\x6c\x9b\xd8\xa6\xb6\x99\x6d\x63\x5f\xb6\x6d\xed\x2b\x36\xd9\xbe\x6a\xdb\xd9\xd7\xfe\x14\x2f\xb0\x0b\xed\x1a\xbb\xd6\xae\xb3\xeb\xed\x3e\xbb\xdf\x5e\xb0\x17\xed\x31\xfb\x93\xbd\x64\x7f\xb3\xdd\x6d\x0f\xdb\xdf\xbe\x67\x07\xd8\xf7\xed\x40\xfb\x81\x1d\x64\x07\xff\x29\x1e\x69\x3f\xb1\xa3\xec\x68\x3b\xc6\x8e\xb5\xe3\xec\xf8\x3f\xc5\x53\xec\x54\x9b\x66\xa7\xd9\xe9\xf6\x0b\x3b\xc3\xce\xfc\x53\x9c\x6e\xbf\xb6\xb3\x6d\x86\x9d\x63\xe7\xda\x79\x76\xfe\xef\xf1\xb5\x35\x65\xd8\x45\x76\xb1\x5d\x62\x33\xed\x52\xbb\xcc\x2e\xb7\x2b\xec\x4a\xbb\xca\xae\xfe\xcf\xb5\x2e\xb7\x1b\xed\x26\xbb\xd9\xee\xb1\x7b\xed\x36\xbb\xdd\xee\xb0\x3b\xed\x2e\xbb\xfb\xf7\xf8\xda\x3e\x0e\xd8\x6f\x6c\x96\xfd\xd6\x1e\xb5\x3f\xda\x43\xf6\x3b\x7b\xd8\x1e\xb7\x47\xec\x0f\xbf\xc7\xd7\xf6\x77\xdc\xfe\x6c\x4f\xd8\x5f\xec\x49\x7b\xca\x9e\xb6\x67\xec\x59\xfb\xab\x3d\x67\xcf\xff\xbe\xff\x6b\x7b\x3f\x63\xaf\xd8\xab\xd6\x5b\x41\x40\x92\x14\x69\x0a\x28\x07\xe5\xa4\x18\xca\x45\xb1\x74\x0b\xc5\xd1\xad\x94\x9b\x6e\xa3\x08\xdd\x4e\xf1\x74\x07\xe5\xa1\x3b\x29\x2f\xe5\xa3\xfc\x54\x80\x12\xa8\x20\x15\x22\x43\x48\x96\x88\x42\x2a\x4c\x45\x28\x4a\x77\x51\x51\xba\x9b\x12\xa9\x18\x15\xa7\x12\xe4\xa8\x24\x25\xd1\x3d\x54\x8a\xee\xa5\xd2\x74\x1f\x95\xa1\xfb\xa9\x2c\x3d\x40\xe5\xa8\x3c\x55\xa0\x8a\xf4\x20\x55\xa2\x87\xa8\x32\x3d\x4c\x55\xe8\x11\xaa\x4a\xd5\xa8\x3a\xd5\xa0\x47\xa9\x26\x3d\x46\xb5\xe8\x71\xaa\x4d\x4f\x50\x1d\x7a\x92\xea\xd2\x53\x54\x8f\x9e\xa6\xfa\xf4\x0c\x35\xa0\x67\xa9\x21\x3d\x47\x8d\xe8\x79\x6a\x4c\x4d\x28\xa0\x66\xd4\x9c\x5e\xa0\x16\xf4\x22\xb5\xa4\x56\xd4\x9a\x5e\xa2\x36\xf4\x32\xb5\xa5\x57\x28\x99\x5e\xa5\x76\xf4\x1a\xb5\xa7\xd7\xa9\x03\xbd\x41\x1d\xe9\x4d\xea\x44\x6f\x51\x67\xea\x42\x5d\xe9\x6d\xea\x46\xef\x50\x77\xea\x41\x29\xd4\x93\x7a\xd1\xbb\xd4\x9b\xfa\x50\x5f\xea\x47\xfd\xe9\x3d\x1a\x40\xef\xd3\x40\xfa\x80\x06\xd1\x60\x1a\x42\x1f\xd2\x50\xfa\x88\x86\xd1\xc7\x34\x9c\x46\xd0\x48\xfa\x84\x46\xd1\x68\x1a\x43\x63\x69\x1c\x8d\xa7\x54\xfa\x94\x26\xd0\x67\x34\x91\x3e\xa7\x49\x34\x99\xa6\xd0\x54\x4a\xa3\x69\x34\x9d\xbe\xa0\x19\x34\x93\x66\xd1\x97\x34\x9b\xbe\xa2\x39\x34\x97\xe6\xd1\x7c\x4a\xa7\xaf\x69\x01\x2d\xa4\x0c\x5a\x44\x8b\x69\x09\x65\xd2\x52\x5a\x46\xcb\x69\x05\xad\xa4\x55\xb4\x9a\xd6\x2c\x89\xa5\x75\xb4\x9e\x36\xd0\x46\xda\x44\x9b\x69\x0b\x6d\xa5\x6d\xb4\x9d\x76\xd0\x4e\xda\x45\xbb\x69\x0f\xed\xa5\x7d\xb4\x9f\x0e\xd0\x37\x94\x45\xdf\xd2\x41\xfa\x0b\x1d\xa2\xef\xe8\x30\x7d\x4f\x47\xe8\x07\x3a\x4a\x3f\xd2\x31\xfa\x89\x8e\xd3\xcf\x74\x82\x7e\xa1\x93\x74\x8a\x4e\xd3\x19\x3a\x4b\xbf\xd2\x39\x3a\x4f\x17\xe8\x22\x5d\xa2\xdf\xe8\x32\x5d\xa1\xab\xe4\x49\x84\x10\xca\x50\x85\x3a\x0c\xc2\x1c\x61\xce\x30\x26\xcc\x15\xc6\x86\xb7\x84\x71\xe1\xad\x61\xee\xf0\xb6\x30\x12\xde\x1e\xc6\x87\x77\x84\x79\xc2\x3b\xc3\xbc\x61\xbe\x30\x7f\x58\x20\x4c\x08\x0b\x86\x85\x42\x13\x62\x68\x43\x0a\xc3\xb0\x70\x58\x24\x8c\x86\x77\x85\x45\xc3\xbb\xc3\xc4\xb0\x58\x58\x3c\x2c\x11\xba\xb0\x64\x98\x14\xde\x13\x96\x0a\xef\x0d\x4b\x87\xf7\x85\x65\xc2\xfb\xc3\xb2\xe1\x03\x61\xb9\xb0\x7c\x58\x21\xac\x18\x3e\x18\x56\x0a\x1f\x0a\x2b\x87\x0f\x87\x55\xc2\x47\xc2\xaa\x61\xb5\xb0\x7a\x58\x23\x7c\x34\xac\x19\x3e\x16\xd6\x0a\x1f\x0f\x6b\x87\x4f\x84\xa5\xc3\x27\xc3\xba\xe1\x53\x61\xbd\xf0\xe9\xb0\x7e\xf8\x4c\xd8\x20\x7c\x36\x6c\x18\x3e\x17\x36\x0a\x9f\x0f\x1b\x87\x4d\xc2\xa6\x61\xb3\xb0\x79\xf8\x42\xd8\x22\x7c\x31\x6c\x19\xb6\x0a\x5b\x87\x2f\x85\x6d\xc2\x97\xc3\xb6\xe1\x2b\x61\x72\xf8\x6a\xd8\x2e\x7c\xed\x86\xc7\x53\xc2\x9e\x61\xaf\xf0\xdd\xf0\xdd\xd0\xfb\xc7\xd5\xbc\xe8\xfc\x68\x7a\xf4\xeb\xe8\x82\xe8\xc2\x68\x46\x74\x51\x74\x71\x74\x49\x34\x33\xba\x34\xba\x2c\xba\x3c\xba\x22\xba\x32\xba\x2a\xba\x3a\xba\x26\xba\x36\xba\x2e\xba\x3e\xba\x21\xba\x31\xba\x29\xba\x39\xea\x7d\x8d\x9c\xc2\x81\x93\x4e\x39\xed\x02\x97\xc3\xe5\x74\x31\x2e\x97\x8b\x75\xb7\xb8\x38\x77\xab\xcb\xed\x6e\x73\x11\x77\xbb\x8b\x77\x77\xb8\x3c\x4e\x8b\xbc\x2e\x9f\xcb\xef\x0a\xb8\x04\x57\xd0\x15\x72\xc6\xa1\xb3\x8e\x5c\xe8\x0a\xbb\x22\x2e\xea\xee\x72\x45\xdd\xdd\x2e\xd1\x15\x73\xc5\x5d\x09\xe7\x5c\x49\x97\xe4\x9a\xb9\xe6\xae\xb9\x6b\xe1\x5e\x74\x2d\x5d\x2b\xd7\xda\xbd\xe4\x5e\x72\x2f\xbb\x97\xdd\x2b\xee\x15\xf7\xaa\x6b\xe7\x5e\x73\xed\xdd\xeb\xae\x83\x7b\xc3\x75\x74\x6f\xba\x37\xdd\x5b\xae\xb3\xeb\xe2\xba\xba\xb7\x5d\x37\xf7\x8e\xeb\xee\x7a\xb8\x14\x97\xe2\x7a\xb9\x5e\xae\xb7\xeb\xed\xfa\xba\xbe\xae\xbf\xeb\xef\x06\xb8\x01\x6e\xa0\x1b\xe8\x06\xb9\x41\x6e\x88\x1b\xe2\x86\xba\xa1\x6e\x98\x1b\xe6\x86\xbb\xe1\x6e\xa4\x1b\xe9\x46\xb9\x51\x6e\x8c\x1b\xe3\xc6\xb9\x71\x2e\xd5\xa5\xba\x09\x6e\x82\x9b\xe8\x26\xba\x49\x6e\x92\x9b\xe2\xa6\xb8\x34\x97\xe6\xa6\xbb\xe9\x6e\x86\x9b\xe1\x66\xb9\x59\x6e\xb6\x9b\xed\xe6\xb8\x39\x6e\x9e\x9b\xe7\xd2\x5d\xba\x5b\xe0\x16\xb8\x0c\x97\xe1\x16\xbb\xc5\x2e\xd3\x65\xba\x65\x6e\x99\x5b\xe1\x56\xb8\x55\x6e\x95\x5b\xe3\xd6\xb8\x75\x6e\x9d\xdb\xe0\x36\xb8\x4d\x6e\x93\xdb\xe2\xb6\xb8\x6d\x6e\x9b\xdb\xe1\x76\xb8\x5d\x6e\x97\xdb\xe3\xf6\xb8\x7d\x6e\x9f\x3b\xe0\x0e\xb8\x2c\x97\xe5\x0e\xba\x83\xee\x90\x3b\xe4\x0e\xbb\xef\xdd\x11\xf7\x83\x3b\xea\x7e\x74\xc7\xdc\x4f\xee\xb8\xfb\xd9\x9d\x70\xbf\xb8\x93\xee\x94\x3b\xed\xce\xb8\xb3\xee\x57\x77\xce\x9d\x77\x17\xdc\x45\x77\xc9\xfd\xe6\x2e\xbb\x2b\xee\xaa\xf3\x2e\x35\xf2\x69\x64\x42\xe4\xb3\xc8\xc4\xc8\xe7\x91\x49\x91\xc9\x91\x29\x91\xa9\x91\xb4\xc8\xb4\xc8\xf4\xc8\x17\x91\x19\x91\x99\x91\x59\x91\x2f\x23\xb3\x23\x5f\x45\xe6\x44\xe6\x46\xe6\x45\xe6\x47\xd2\x23\x5f\x47\x16\x44\x16\x46\x32\x22\x8b\x22\x8b\x23\x4b\x22\x99\x91\xa5\x91\x65\x91\xe5\x91\x15\x91\x95\x11\xef\x0b\x6e\x0b\x7d\x61\x5f\xc4\x47\xfd\x5d\xbe\xa8\xbf\xdb\x27\xfa\x62\xbe\xb8\x2f\xe1\x9d\x2f\xe9\x93\xfc\x3d\xbe\x94\xbf\xd7\x97\xf6\xf7\xf9\x32\xfe\x7e\x5f\xd6\x3f\xe0\xcb\xf9\xf2\xbe\x82\x7f\xde\x37\xf6\x4d\x7c\x53\xdf\xcc\x37\xf7\x2f\xf8\x16\xfe\x45\xdf\xd2\xb7\xf2\xad\xfd\x4b\xbe\x8d\x7f\xd9\xb7\xf5\xaf\xf8\x64\xff\xaa\x6f\xe7\x5f\xf3\xed\xfd\xeb\xbe\x83\x7f\xc3\x77\xf4\x6f\xfa\x4e\xfe\x2d\xdf\xd9\x77\xf1\x5d\xfd\xdb\xbe\x9b\x7f\xc7\x77\xf7\x3d\x7c\x8a\xef\xe9\x7b\xf9\x77\x7d\x6f\xdf\xc7\xf7\xf5\xfd\x7c\x7f\xff\x9e\x1f\xe0\xdf\xf7\x03\xfd\x07\x7e\x90\x1f\xec\x87\xf8\x0f\xfd\x50\xff\x91\x1f\xe6\x3f\xf6\xc3\xfd\x08\x3f\xd2\x7f\xe2\x47\xf9\xd1\x7e\x8c\x1f\xeb\xc7\xf9\xf1\x3e\xd5\x7f\xea\x27\xf8\xcf\xfc\x44\xff\xb9\x9f\xe4\x27\xfb\x29\x7e\xaa\x4f\xf3\xd3\xfc\x74\xff\x85\x9f\xe1\x67\xfa\x59\xfe\x4b\x3f\xdb\x7f\xe5\xe7\xf8\xb9\x7e\x9e\x9f\xef\xd3\xfd\xd7\x7e\x81\x5f\xe8\x33\xfc\x22\xbf\xd8\x2f\xf1\x99\x7e\xa9\x5f\xe6\x97\xfb\x15\x7e\xa5\x5f\xe5\x57\xfb\x35\x7e\xad\x5f\xe7\xd7\xfb\x0d\x7e\xa3\xdf\xe4\x37\xfb\x2d\x7e\xab\xdf\xe6\xb7\xfb\x1d\x7e\xa7\xdf\xe5\x77\xfb\x3d\x7e\xaf\xdf\xe7\xf7\xfb\x03\xfe\x1b\x9f\xe5\xbf\xf5\x07\xfd\x5f\xfc\x21\xff\x9d\x3f\xec\xbf\xf7\x47\xfc\x0f\xfe\xa8\xff\xd1\x1f\xf3\x3f\xf9\xe3\xfe\x67\x7f\xc2\xff\xe2\x4f\xfa\x53\xfe\xb4\x3f\xe3\xcf\xfa\x5f\xfd\x39\x7f\xde\x5f\xf0\x17\xfd\x25\xff\x9b\xbf\xec\xaf\xf8\xab\xfc\x3f\x6b\x8c\x31\xc6\x18\x63\xff\x2d\xea\x06\xc7\x7b\xfe\x93\xef\xc9\x3f\xc6\x35\xbd\x84\x10\xb7\x6e\x2f\x70\xe4\x1f\x6b\x6e\xc8\xfb\xd7\x79\x1f\x99\xd0\x26\x22\x84\x78\xb5\x47\xa7\x67\xfe\x63\x54\xad\x9a\x92\x92\xf2\xc7\x63\x33\x95\x08\x8a\xcc\x15\x42\x44\xae\xe7\xe7\x10\xd7\xe3\xa5\xa2\xb5\x78\x59\x24\x8b\x56\xa2\xd4\x3f\x5d\x5f\x1f\xd9\xe5\x12\xdd\xa0\x7e\xf4\x7e\x21\x62\xff\x26\x27\x46\x5c\x8f\xaf\xd7\xbf\xf7\xbf\xa8\x3f\x7a\xf6\x0d\xeb\xcf\x15\x22\xb1\xc8\xf5\x9c\x5c\x7f\x8c\xbf\xaf\x5f\xfa\xbf\xa8\x9f\xaf\xc5\x0d\xea\xe7\xfa\x2e\x55\x88\x96\x7f\x93\x13\x27\xfe\x88\xab\x95\xf8\x9b\xfa\x49\xe2\x45\xf1\x9a\x48\xfe\xbb\x47\x32\xc6\x18\x63\x8c\x31\xc6\x18\x63\x7f\xd5\x47\x56\xe8\x70\xa3\xeb\xdb\x6b\xd7\xe7\x09\xfa\x7a\x4e\x4e\x71\x3d\xbe\xd1\xf5\xf9\xdf\xd2\xff\x43\x7b\x60\x8c\x31\xc6\x18\x63\x8c\x31\xc6\xd8\xff\xdd\x1b\x5d\xba\xbe\xf2\x42\x72\x72\xab\x0e\x3c\xe1\x09\x4f\x78\xf2\x9f\x93\x9b\xfd\x97\x89\x31\xc6\x18\x63\x8c\x31\xf6\xef\x76\xfd\xa4\xff\x66\xaf\x84\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\xcb\xbe\xfe\x37\x3e\x4e\xec\x66\xef\x91\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\x18\xbb\xd9\xfe\x4f\x00\x00\x00\xff\xff\xe5\xc2\x35\x2c", 5339);
syz_mount_image(/*fs=*/0x20001500, /*dir=*/0x20001540, /*flags=MS_I_VERSION|MS_NODEV|MS_MANDLOCK*/0x800044, /*opts=*/0x20000380, /*chdir=*/1, /*size=*/0x14db, /*img=*/0x20002ac0);
memcpy((void*)0x20002040, "/dev/fuse\000", 10);
	res = syscall(__NR_openat, /*fd=*/0xffffffffffffff9cul, /*file=*/0x20002040ul, /*flags=*/2, /*mode=*/0);
	if (res != -1)
		r[0] = res;
memcpy((void*)0x20002080, "./file0\000", 8);
memcpy((void*)0x200020c0, "fuse\000", 5);
memcpy((void*)0x20002100, "fd", 2);
*(uint8_t*)0x20002102 = 0x3d;
sprintf((char*)0x20002103, "0x%016llx", (long long)r[0]);
*(uint8_t*)0x20002115 = 0x2c;
memcpy((void*)0x20002116, "rootmode", 8);
*(uint8_t*)0x2000211e = 0x3d;
sprintf((char*)0x2000211f, "%023llo", (long long)0x4000);
*(uint8_t*)0x20002136 = 0x2c;
memcpy((void*)0x20002137, "user_id", 7);
*(uint8_t*)0x2000213e = 0x3d;
sprintf((char*)0x2000213f, "%020llu", (long long)0);
*(uint8_t*)0x20002153 = 0x2c;
memcpy((void*)0x20002154, "group_id", 8);
*(uint8_t*)0x2000215c = 0x3d;
sprintf((char*)0x2000215d, "%020llu", (long long)0);
*(uint8_t*)0x20002171 = 0x2c;
*(uint8_t*)0x20002172 = 0;
	syscall(__NR_mount, /*src=*/0ul, /*dst=*/0x20002080ul, /*type=*/0x200020c0ul, /*flags=*/0ul, /*opts=*/0x20002100ul);

}
int main(void)
{
		syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul, /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/0x32ul, /*fd=*/-1, /*offset=*/0ul);
	syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul, /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/7ul, /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/0x32ul, /*fd=*/-1, /*offset=*/0ul);
	syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul, /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/0x32ul, /*fd=*/-1, /*offset=*/0ul);
	const char* reason;
	(void)reason;
			use_temporary_dir();
			loop();
	return 0;
}
